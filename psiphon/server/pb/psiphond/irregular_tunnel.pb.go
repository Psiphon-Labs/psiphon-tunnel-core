// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: ca.psiphon.psiphond/irregular_tunnel.proto

package psiphond

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IrregularTunnel struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	BaseParams                         *BaseParams            `protobuf:"bytes,1,opt,name=base_params,json=baseParams,proto3,oneof" json:"base_params,omitempty"`
	DuplicateAuthorizationClientAsn    *string                `protobuf:"bytes,100,opt,name=duplicate_authorization_client_asn,json=duplicateAuthorizationClientAsn,proto3,oneof" json:"duplicate_authorization_client_asn,omitempty"`
	DuplicateAuthorizationClientAso    *string                `protobuf:"bytes,101,opt,name=duplicate_authorization_client_aso,json=duplicateAuthorizationClientAso,proto3,oneof" json:"duplicate_authorization_client_aso,omitempty"`
	DuplicateAuthorizationClientCity   *string                `protobuf:"bytes,102,opt,name=duplicate_authorization_client_city,json=duplicateAuthorizationClientCity,proto3,oneof" json:"duplicate_authorization_client_city,omitempty"`
	DuplicateAuthorizationClientIsp    *string                `protobuf:"bytes,103,opt,name=duplicate_authorization_client_isp,json=duplicateAuthorizationClientIsp,proto3,oneof" json:"duplicate_authorization_client_isp,omitempty"`
	DuplicateAuthorizationClientRegion *string                `protobuf:"bytes,104,opt,name=duplicate_authorization_client_region,json=duplicateAuthorizationClientRegion,proto3,oneof" json:"duplicate_authorization_client_region,omitempty"`
	DuplicateAuthorizationId           *string                `protobuf:"bytes,105,opt,name=duplicate_authorization_id,json=duplicateAuthorizationId,proto3,oneof" json:"duplicate_authorization_id,omitempty"`
	DuplicateClientIp                  *string                `protobuf:"bytes,106,opt,name=duplicate_client_ip,json=duplicateClientIp,proto3,oneof" json:"duplicate_client_ip,omitempty"`
	DuplicateElapsedTimeMs             *int64                 `protobuf:"varint,107,opt,name=duplicate_elapsed_time_ms,json=duplicateElapsedTimeMs,proto3,oneof" json:"duplicate_elapsed_time_ms,omitempty"`
	DuplicateSeed                      *string                `protobuf:"bytes,108,opt,name=duplicate_seed,json=duplicateSeed,proto3,oneof" json:"duplicate_seed,omitempty"`
	DuplicateSeedType                  *string                `protobuf:"bytes,109,opt,name=duplicate_seed_type,json=duplicateSeedType,proto3,oneof" json:"duplicate_seed_type,omitempty"`
	ListenerPortNumber                 *uint32                `protobuf:"varint,110,opt,name=listener_port_number,json=listenerPortNumber,proto3,oneof" json:"listener_port_number,omitempty"`
	ListenerProtocol                   *string                `protobuf:"bytes,111,opt,name=listener_protocol,json=listenerProtocol,proto3,oneof" json:"listener_protocol,omitempty"`
	TunnelError                        *string                `protobuf:"bytes,112,opt,name=tunnel_error,json=tunnelError,proto3,oneof" json:"tunnel_error,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *IrregularTunnel) Reset() {
	*x = IrregularTunnel{}
	mi := &file_ca_psiphon_psiphond_irregular_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IrregularTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrregularTunnel) ProtoMessage() {}

func (x *IrregularTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_irregular_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrregularTunnel.ProtoReflect.Descriptor instead.
func (*IrregularTunnel) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *IrregularTunnel) GetBaseParams() *BaseParams {
	if x != nil {
		return x.BaseParams
	}
	return nil
}

func (x *IrregularTunnel) GetDuplicateAuthorizationClientAsn() string {
	if x != nil && x.DuplicateAuthorizationClientAsn != nil {
		return *x.DuplicateAuthorizationClientAsn
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateAuthorizationClientAso() string {
	if x != nil && x.DuplicateAuthorizationClientAso != nil {
		return *x.DuplicateAuthorizationClientAso
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateAuthorizationClientCity() string {
	if x != nil && x.DuplicateAuthorizationClientCity != nil {
		return *x.DuplicateAuthorizationClientCity
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateAuthorizationClientIsp() string {
	if x != nil && x.DuplicateAuthorizationClientIsp != nil {
		return *x.DuplicateAuthorizationClientIsp
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateAuthorizationClientRegion() string {
	if x != nil && x.DuplicateAuthorizationClientRegion != nil {
		return *x.DuplicateAuthorizationClientRegion
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateAuthorizationId() string {
	if x != nil && x.DuplicateAuthorizationId != nil {
		return *x.DuplicateAuthorizationId
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateClientIp() string {
	if x != nil && x.DuplicateClientIp != nil {
		return *x.DuplicateClientIp
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateElapsedTimeMs() int64 {
	if x != nil && x.DuplicateElapsedTimeMs != nil {
		return *x.DuplicateElapsedTimeMs
	}
	return 0
}

func (x *IrregularTunnel) GetDuplicateSeed() string {
	if x != nil && x.DuplicateSeed != nil {
		return *x.DuplicateSeed
	}
	return ""
}

func (x *IrregularTunnel) GetDuplicateSeedType() string {
	if x != nil && x.DuplicateSeedType != nil {
		return *x.DuplicateSeedType
	}
	return ""
}

func (x *IrregularTunnel) GetListenerPortNumber() uint32 {
	if x != nil && x.ListenerPortNumber != nil {
		return *x.ListenerPortNumber
	}
	return 0
}

func (x *IrregularTunnel) GetListenerProtocol() string {
	if x != nil && x.ListenerProtocol != nil {
		return *x.ListenerProtocol
	}
	return ""
}

func (x *IrregularTunnel) GetTunnelError() string {
	if x != nil && x.TunnelError != nil {
		return *x.TunnelError
	}
	return ""
}

var File_ca_psiphon_psiphond_irregular_tunnel_proto protoreflect.FileDescriptor

const file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDesc = "" +
	"\n" +
	"*ca.psiphon.psiphond/irregular_tunnel.proto\x12\x13ca.psiphon.psiphond\x1a%ca.psiphon.psiphond/base_params.proto\"\xbb\n" +
	"\n" +
	"\x0fIrregularTunnel\x12E\n" +
	"\vbase_params\x18\x01 \x01(\v2\x1f.ca.psiphon.psiphond.BaseParamsH\x00R\n" +
	"baseParams\x88\x01\x01\x12P\n" +
	"\"duplicate_authorization_client_asn\x18d \x01(\tH\x01R\x1fduplicateAuthorizationClientAsn\x88\x01\x01\x12P\n" +
	"\"duplicate_authorization_client_aso\x18e \x01(\tH\x02R\x1fduplicateAuthorizationClientAso\x88\x01\x01\x12R\n" +
	"#duplicate_authorization_client_city\x18f \x01(\tH\x03R duplicateAuthorizationClientCity\x88\x01\x01\x12P\n" +
	"\"duplicate_authorization_client_isp\x18g \x01(\tH\x04R\x1fduplicateAuthorizationClientIsp\x88\x01\x01\x12V\n" +
	"%duplicate_authorization_client_region\x18h \x01(\tH\x05R\"duplicateAuthorizationClientRegion\x88\x01\x01\x12A\n" +
	"\x1aduplicate_authorization_id\x18i \x01(\tH\x06R\x18duplicateAuthorizationId\x88\x01\x01\x123\n" +
	"\x13duplicate_client_ip\x18j \x01(\tH\aR\x11duplicateClientIp\x88\x01\x01\x12>\n" +
	"\x19duplicate_elapsed_time_ms\x18k \x01(\x03H\bR\x16duplicateElapsedTimeMs\x88\x01\x01\x12*\n" +
	"\x0eduplicate_seed\x18l \x01(\tH\tR\rduplicateSeed\x88\x01\x01\x123\n" +
	"\x13duplicate_seed_type\x18m \x01(\tH\n" +
	"R\x11duplicateSeedType\x88\x01\x01\x125\n" +
	"\x14listener_port_number\x18n \x01(\rH\vR\x12listenerPortNumber\x88\x01\x01\x120\n" +
	"\x11listener_protocol\x18o \x01(\tH\fR\x10listenerProtocol\x88\x01\x01\x12&\n" +
	"\ftunnel_error\x18p \x01(\tH\rR\vtunnelError\x88\x01\x01B\x0e\n" +
	"\f_base_paramsB%\n" +
	"#_duplicate_authorization_client_asnB%\n" +
	"#_duplicate_authorization_client_asoB&\n" +
	"$_duplicate_authorization_client_cityB%\n" +
	"#_duplicate_authorization_client_ispB(\n" +
	"&_duplicate_authorization_client_regionB\x1d\n" +
	"\x1b_duplicate_authorization_idB\x16\n" +
	"\x14_duplicate_client_ipB\x1c\n" +
	"\x1a_duplicate_elapsed_time_msB\x11\n" +
	"\x0f_duplicate_seedB\x16\n" +
	"\x14_duplicate_seed_typeB\x17\n" +
	"\x15_listener_port_numberB\x14\n" +
	"\x12_listener_protocolB\x0f\n" +
	"\r_tunnel_errorBHZFgithub.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pb/psiphondb\x06proto3"

var (
	file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescOnce sync.Once
	file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescData []byte
)

func file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescGZIP() []byte {
	file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescOnce.Do(func() {
		file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDesc), len(file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDesc)))
	})
	return file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDescData
}

var file_ca_psiphon_psiphond_irregular_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ca_psiphon_psiphond_irregular_tunnel_proto_goTypes = []any{
	(*IrregularTunnel)(nil), // 0: ca.psiphon.psiphond.IrregularTunnel
	(*BaseParams)(nil),      // 1: ca.psiphon.psiphond.BaseParams
}
var file_ca_psiphon_psiphond_irregular_tunnel_proto_depIdxs = []int32{
	1, // 0: ca.psiphon.psiphond.IrregularTunnel.base_params:type_name -> ca.psiphon.psiphond.BaseParams
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ca_psiphon_psiphond_irregular_tunnel_proto_init() }
func file_ca_psiphon_psiphond_irregular_tunnel_proto_init() {
	if File_ca_psiphon_psiphond_irregular_tunnel_proto != nil {
		return
	}
	file_ca_psiphon_psiphond_base_params_proto_init()
	file_ca_psiphon_psiphond_irregular_tunnel_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDesc), len(file_ca_psiphon_psiphond_irregular_tunnel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ca_psiphon_psiphond_irregular_tunnel_proto_goTypes,
		DependencyIndexes: file_ca_psiphon_psiphond_irregular_tunnel_proto_depIdxs,
		MessageInfos:      file_ca_psiphon_psiphond_irregular_tunnel_proto_msgTypes,
	}.Build()
	File_ca_psiphon_psiphond_irregular_tunnel_proto = out.File
	file_ca_psiphon_psiphond_irregular_tunnel_proto_goTypes = nil
	file_ca_psiphon_psiphond_irregular_tunnel_proto_depIdxs = nil
}
