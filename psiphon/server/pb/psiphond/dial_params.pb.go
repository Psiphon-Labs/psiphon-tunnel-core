// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: ca.psiphon.psiphond/dial_params.proto

package psiphond

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DialParams struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	ConjureCached                     *bool                  `protobuf:"varint,1,opt,name=conjure_cached,json=conjureCached,proto3,oneof" json:"conjure_cached,omitempty"`
	ConjureDelay                      *int64                 `protobuf:"varint,2,opt,name=conjure_delay,json=conjureDelay,proto3,oneof" json:"conjure_delay,omitempty"`
	ConjureEmptyPacket                *bool                  `protobuf:"varint,3,opt,name=conjure_empty_packet,json=conjureEmptyPacket,proto3,oneof" json:"conjure_empty_packet,omitempty"`
	ConjureNetwork                    *string                `protobuf:"bytes,4,opt,name=conjure_network,json=conjureNetwork,proto3,oneof" json:"conjure_network,omitempty"` //LowCardinality
	ConjurePortNumber                 *int64                 `protobuf:"varint,5,opt,name=conjure_port_number,json=conjurePortNumber,proto3,oneof" json:"conjure_port_number,omitempty"`
	ConjurePrefix                     *string                `protobuf:"bytes,6,opt,name=conjure_prefix,json=conjurePrefix,proto3,oneof" json:"conjure_prefix,omitempty"`          //LowCardinality
	ConjureStun                       *string                `protobuf:"bytes,7,opt,name=conjure_stun,json=conjureStun,proto3,oneof" json:"conjure_stun,omitempty"`                //LowCardinality
	ConjureTransport                  *string                `protobuf:"bytes,8,opt,name=conjure_transport,json=conjureTransport,proto3,oneof" json:"conjure_transport,omitempty"` //LowCardinality
	MeekCookieSize                    *int64                 `protobuf:"varint,9,opt,name=meek_cookie_size,json=meekCookieSize,proto3,oneof" json:"meek_cookie_size,omitempty"`
	MeekContentType                   *string                `protobuf:"bytes,10,opt,name=meek_content_type,json=meekContentType,proto3,oneof" json:"meek_content_type,omitempty"`
	MeekCookieName                    *string                `protobuf:"bytes,11,opt,name=meek_cookie_name,json=meekCookieName,proto3,oneof" json:"meek_cookie_name,omitempty"`            //LowCardinality
	MeekDialDomain                    *string                `protobuf:"bytes,12,opt,name=meek_dial_domain,json=meekDialDomain,proto3,oneof" json:"meek_dial_domain,omitempty"`            //LowCardinality
	MeekDialIpAddress                 *string                `protobuf:"bytes,13,opt,name=meek_dial_ip_address,json=meekDialIpAddress,proto3,oneof" json:"meek_dial_ip_address,omitempty"` //LowCardinality
	MeekHostHeader                    *string                `protobuf:"bytes,14,opt,name=meek_host_header,json=meekHostHeader,proto3,oneof" json:"meek_host_header,omitempty"`
	MeekLimitRequest                  *int64                 `protobuf:"varint,15,opt,name=meek_limit_request,json=meekLimitRequest,proto3,oneof" json:"meek_limit_request,omitempty"`
	MeekRedialProbability             *int64                 `protobuf:"varint,16,opt,name=meek_redial_probability,json=meekRedialProbability,proto3,oneof" json:"meek_redial_probability,omitempty"`
	MeekResolvedIpAddress             *string                `protobuf:"bytes,17,opt,name=meek_resolved_ip_address,json=meekResolvedIpAddress,proto3,oneof" json:"meek_resolved_ip_address,omitempty"` //LowCardinality
	MeekSniServerName                 *string                `protobuf:"bytes,18,opt,name=meek_sni_server_name,json=meekSniServerName,proto3,oneof" json:"meek_sni_server_name,omitempty"`
	MeekTlsPadding                    *int64                 `protobuf:"varint,19,opt,name=meek_tls_padding,json=meekTlsPadding,proto3,oneof" json:"meek_tls_padding,omitempty"`
	MeekTransformedHostName           *bool                  `protobuf:"varint,20,opt,name=meek_transformed_host_name,json=meekTransformedHostName,proto3,oneof" json:"meek_transformed_host_name,omitempty"`
	QuicDialEarly                     *bool                  `protobuf:"varint,21,opt,name=quic_dial_early,json=quicDialEarly,proto3,oneof" json:"quic_dial_early,omitempty"`
	QuicDialSniAddress                *string                `protobuf:"bytes,22,opt,name=quic_dial_sni_address,json=quicDialSniAddress,proto3,oneof" json:"quic_dial_sni_address,omitempty"`
	QuicDidResume                     *bool                  `protobuf:"varint,23,opt,name=quic_did_resume,json=quicDidResume,proto3,oneof" json:"quic_did_resume,omitempty"`
	QuicDisableClientPathMtuDiscovery *bool                  `protobuf:"varint,24,opt,name=quic_disable_client_path_mtu_discovery,json=quicDisableClientPathMtuDiscovery,proto3,oneof" json:"quic_disable_client_path_mtu_discovery,omitempty"`
	QuicObfuscatedPsk                 *bool                  `protobuf:"varint,25,opt,name=quic_obfuscated_psk,json=quicObfuscatedPsk,proto3,oneof" json:"quic_obfuscated_psk,omitempty"`
	QuicSentTicket                    *bool                  `protobuf:"varint,26,opt,name=quic_sent_ticket,json=quicSentTicket,proto3,oneof" json:"quic_sent_ticket,omitempty"`
	QuicVersion                       *string                `protobuf:"bytes,27,opt,name=quic_version,json=quicVersion,proto3,oneof" json:"quic_version,omitempty"`                   //LowCardinality
	ShadowsocksPrefix                 *string                `protobuf:"bytes,28,opt,name=shadowsocks_prefix,json=shadowsocksPrefix,proto3,oneof" json:"shadowsocks_prefix,omitempty"` //LowCardinality
	TlsDidResume                      *bool                  `protobuf:"varint,29,opt,name=tls_did_resume,json=tlsDidResume,proto3,oneof" json:"tls_did_resume,omitempty"`
	TlsFragmented                     *bool                  `protobuf:"varint,30,opt,name=tls_fragmented,json=tlsFragmented,proto3,oneof" json:"tls_fragmented,omitempty"`
	TlsOsshSniServerName              *string                `protobuf:"bytes,31,opt,name=tls_ossh_sni_server_name,json=tlsOsshSniServerName,proto3,oneof" json:"tls_ossh_sni_server_name,omitempty"`
	TlsOsshTransformedHostName        *bool                  `protobuf:"varint,32,opt,name=tls_ossh_transformed_host_name,json=tlsOsshTransformedHostName,proto3,oneof" json:"tls_ossh_transformed_host_name,omitempty"`
	TlsPadding                        *int64                 `protobuf:"varint,33,opt,name=tls_padding,json=tlsPadding,proto3,oneof" json:"tls_padding,omitempty"`
	TlsProfile                        *string                `protobuf:"bytes,34,opt,name=tls_profile,json=tlsProfile,proto3,oneof" json:"tls_profile,omitempty"` //LowCardinality
	TlsSentTicket                     *bool                  `protobuf:"varint,35,opt,name=tls_sent_ticket,json=tlsSentTicket,proto3,oneof" json:"tls_sent_ticket,omitempty"`
	TlsVersion                        *string                `protobuf:"bytes,36,opt,name=tls_version,json=tlsVersion,proto3,oneof" json:"tls_version,omitempty"`                        //LowCardinality
	ServerEntryRegion                 *string                `protobuf:"bytes,37,opt,name=server_entry_region,json=serverEntryRegion,proto3,oneof" json:"server_entry_region,omitempty"` //LowCardinality
	ServerEntrySource                 *string                `protobuf:"bytes,38,opt,name=server_entry_source,json=serverEntrySource,proto3,oneof" json:"server_entry_source,omitempty"` //LowCardinality
	ServerEntryTag                    *string                `protobuf:"bytes,39,opt,name=server_entry_tag,json=serverEntryTag,proto3,oneof" json:"server_entry_tag,omitempty"`
	ServerEntryTimestamp              *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=server_entry_timestamp,json=serverEntryTimestamp,proto3,oneof" json:"server_entry_timestamp,omitempty"`
	ServerPacketManipulation          *string                `protobuf:"bytes,41,opt,name=server_packet_manipulation,json=serverPacketManipulation,proto3,oneof" json:"server_packet_manipulation,omitempty"`                      //LowCardinality
	ServerReplayFragmentation         *bool                  `protobuf:"varint,42,opt,name=server_replay_fragmentation,json=serverReplayFragmentation,proto3,oneof" json:"server_replay_fragmentation,omitempty"`                  //LowCardinality
	ServerReplayPacketManipulation    *bool                  `protobuf:"varint,43,opt,name=server_replay_packet_manipulation,json=serverReplayPacketManipulation,proto3,oneof" json:"server_replay_packet_manipulation,omitempty"` //LowCardinality
	ServerEntryValid                  *bool                  `protobuf:"varint,44,opt,name=server_entry_valid,json=serverEntryValid,proto3,oneof" json:"server_entry_valid,omitempty"`
	CandidateNumber                   *int32                 `protobuf:"varint,45,opt,name=candidate_number,json=candidateNumber,proto3,oneof" json:"candidate_number,omitempty"`
	IsReplay                          *bool                  `protobuf:"varint,46,opt,name=is_replay,json=isReplay,proto3,oneof" json:"is_replay,omitempty"`
	DialPortNumber                    *int64                 `protobuf:"varint,47,opt,name=dial_port_number,json=dialPortNumber,proto3,oneof" json:"dial_port_number,omitempty"`
	DialDuration                      *int64                 `protobuf:"varint,48,opt,name=dial_duration,json=dialDuration,proto3,oneof" json:"dial_duration,omitempty"`
	FrontingProviderId                *string                `protobuf:"bytes,49,opt,name=fronting_provider_id,json=frontingProviderId,proto3,oneof" json:"fronting_provider_id,omitempty"` //LowCardinality
	NetworkType                       *string                `protobuf:"bytes,50,opt,name=network_type,json=networkType,proto3,oneof" json:"network_type,omitempty"`                        //LowCardinality
	RelayProtocol                     *string                `protobuf:"bytes,51,opt,name=relay_protocol,json=relayProtocol,proto3,oneof" json:"relay_protocol,omitempty"`                  //LowCardinality
	SshClientVersion                  *string                `protobuf:"bytes,52,opt,name=ssh_client_version,json=sshClientVersion,proto3,oneof" json:"ssh_client_version,omitempty"`       //LowCardinality
	OsshPrefix                        *string                `protobuf:"bytes,53,opt,name=ossh_prefix,json=osshPrefix,proto3,oneof" json:"ossh_prefix,omitempty"`                           //LowCardinality
	UserAgent                         *string                `protobuf:"bytes,54,opt,name=user_agent,json=userAgent,proto3,oneof" json:"user_agent,omitempty"`
	HttpTransform                     *string                `protobuf:"bytes,55,opt,name=http_transform,json=httpTransform,proto3,oneof" json:"http_transform,omitempty"` //LowCardinality
	DnsAttempt                        *int64                 `protobuf:"varint,56,opt,name=dns_attempt,json=dnsAttempt,proto3,oneof" json:"dns_attempt,omitempty"`
	DnsPreferred                      *string                `protobuf:"bytes,57,opt,name=dns_preferred,json=dnsPreferred,proto3,oneof" json:"dns_preferred,omitempty"`       //LowCardinality
	DnsPreresolved                    *string                `protobuf:"bytes,58,opt,name=dns_preresolved,json=dnsPreresolved,proto3,oneof" json:"dns_preresolved,omitempty"` //LowCardinality
	DnsQnameMismatches                *int64                 `protobuf:"varint,59,opt,name=dns_qname_mismatches,json=dnsQnameMismatches,proto3,oneof" json:"dns_qname_mismatches,omitempty"`
	DnsQnameRandomCasing              *bool                  `protobuf:"varint,60,opt,name=dns_qname_random_casing,json=dnsQnameRandomCasing,proto3,oneof" json:"dns_qname_random_casing,omitempty"`
	DnsTransform                      *string                `protobuf:"bytes,61,opt,name=dns_transform,json=dnsTransform,proto3,oneof" json:"dns_transform,omitempty"` //LowCardinality
	DownstreamBytesFragmented         *int64                 `protobuf:"varint,62,opt,name=downstream_bytes_fragmented,json=downstreamBytesFragmented,proto3,oneof" json:"downstream_bytes_fragmented,omitempty"`
	DownstreamMaxBytesWritten         *int64                 `protobuf:"varint,63,opt,name=downstream_max_bytes_written,json=downstreamMaxBytesWritten,proto3,oneof" json:"downstream_max_bytes_written,omitempty"`
	DownstreamMaxDelayed              *int64                 `protobuf:"varint,64,opt,name=downstream_max_delayed,json=downstreamMaxDelayed,proto3,oneof" json:"downstream_max_delayed,omitempty"`
	DownstreamMinBytesWritten         *int64                 `protobuf:"varint,65,opt,name=downstream_min_bytes_written,json=downstreamMinBytesWritten,proto3,oneof" json:"downstream_min_bytes_written,omitempty"`
	DownstreamMinDelayed              *int64                 `protobuf:"varint,66,opt,name=downstream_min_delayed,json=downstreamMinDelayed,proto3,oneof" json:"downstream_min_delayed,omitempty"`
	DownstreamOsshPadding             *int64                 `protobuf:"varint,67,opt,name=downstream_ossh_padding,json=downstreamOsshPadding,proto3,oneof" json:"downstream_ossh_padding,omitempty"`
	UpstreamBytesFragmented           *int64                 `protobuf:"varint,68,opt,name=upstream_bytes_fragmented,json=upstreamBytesFragmented,proto3,oneof" json:"upstream_bytes_fragmented,omitempty"`
	UpstreamMaxBytesWritten           *int64                 `protobuf:"varint,69,opt,name=upstream_max_bytes_written,json=upstreamMaxBytesWritten,proto3,oneof" json:"upstream_max_bytes_written,omitempty"`
	UpstreamMaxDelayed                *int64                 `protobuf:"varint,70,opt,name=upstream_max_delayed,json=upstreamMaxDelayed,proto3,oneof" json:"upstream_max_delayed,omitempty"`
	UpstreamMinBytesWritten           *int64                 `protobuf:"varint,71,opt,name=upstream_min_bytes_written,json=upstreamMinBytesWritten,proto3,oneof" json:"upstream_min_bytes_written,omitempty"`
	UpstreamMinDelayed                *int64                 `protobuf:"varint,72,opt,name=upstream_min_delayed,json=upstreamMinDelayed,proto3,oneof" json:"upstream_min_delayed,omitempty"`
	UpstreamOsshPadding               *int64                 `protobuf:"varint,73,opt,name=upstream_ossh_padding,json=upstreamOsshPadding,proto3,oneof" json:"upstream_ossh_padding,omitempty"`
	UpstreamProxyCustomHeaderNames    []string               `protobuf:"bytes,74,rep,name=upstream_proxy_custom_header_names,json=upstreamProxyCustomHeaderNames,proto3" json:"upstream_proxy_custom_header_names,omitempty"` //LowCardinality
	UpstreamProxyType                 *string                `protobuf:"bytes,75,opt,name=upstream_proxy_type,json=upstreamProxyType,proto3,oneof" json:"upstream_proxy_type,omitempty"`                                      //LowCardinality
	PassthroughAddress                *string                `protobuf:"bytes,76,opt,name=passthrough_address,json=passthroughAddress,proto3,oneof" json:"passthrough_address,omitempty"`                                     //LowCardinality
	PadResponse                       *int64                 `protobuf:"varint,77,opt,name=pad_response,json=padResponse,proto3,oneof" json:"pad_response,omitempty"`
	Padding                           *int64                 `protobuf:"varint,78,opt,name=padding,proto3,oneof" json:"padding,omitempty"`
	ClientBpf                         *string                `protobuf:"bytes,79,opt,name=client_bpf,json=clientBpf,proto3,oneof" json:"client_bpf,omitempty"` //LowCardinality
	ServerBpf                         *string                `protobuf:"bytes,80,opt,name=server_bpf,json=serverBpf,proto3,oneof" json:"server_bpf,omitempty"` //LowCardinality
	EstablishedTunnelsCount           *int64                 `protobuf:"varint,81,opt,name=established_tunnels_count,json=establishedTunnelsCount,proto3,oneof" json:"established_tunnels_count,omitempty"`
	NetworkLatencyMultiplier          *float64               `protobuf:"fixed64,82,opt,name=network_latency_multiplier,json=networkLatencyMultiplier,proto3,oneof" json:"network_latency_multiplier,omitempty"`
	SeedTransform                     *string                `protobuf:"bytes,83,opt,name=seed_transform,json=seedTransform,proto3,oneof" json:"seed_transform,omitempty"` //LowCardinality
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *DialParams) Reset() {
	*x = DialParams{}
	mi := &file_ca_psiphon_psiphond_dial_params_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialParams) ProtoMessage() {}

func (x *DialParams) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_dial_params_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialParams.ProtoReflect.Descriptor instead.
func (*DialParams) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_dial_params_proto_rawDescGZIP(), []int{0}
}

func (x *DialParams) GetConjureCached() bool {
	if x != nil && x.ConjureCached != nil {
		return *x.ConjureCached
	}
	return false
}

func (x *DialParams) GetConjureDelay() int64 {
	if x != nil && x.ConjureDelay != nil {
		return *x.ConjureDelay
	}
	return 0
}

func (x *DialParams) GetConjureEmptyPacket() bool {
	if x != nil && x.ConjureEmptyPacket != nil {
		return *x.ConjureEmptyPacket
	}
	return false
}

func (x *DialParams) GetConjureNetwork() string {
	if x != nil && x.ConjureNetwork != nil {
		return *x.ConjureNetwork
	}
	return ""
}

func (x *DialParams) GetConjurePortNumber() int64 {
	if x != nil && x.ConjurePortNumber != nil {
		return *x.ConjurePortNumber
	}
	return 0
}

func (x *DialParams) GetConjurePrefix() string {
	if x != nil && x.ConjurePrefix != nil {
		return *x.ConjurePrefix
	}
	return ""
}

func (x *DialParams) GetConjureStun() string {
	if x != nil && x.ConjureStun != nil {
		return *x.ConjureStun
	}
	return ""
}

func (x *DialParams) GetConjureTransport() string {
	if x != nil && x.ConjureTransport != nil {
		return *x.ConjureTransport
	}
	return ""
}

func (x *DialParams) GetMeekCookieSize() int64 {
	if x != nil && x.MeekCookieSize != nil {
		return *x.MeekCookieSize
	}
	return 0
}

func (x *DialParams) GetMeekContentType() string {
	if x != nil && x.MeekContentType != nil {
		return *x.MeekContentType
	}
	return ""
}

func (x *DialParams) GetMeekCookieName() string {
	if x != nil && x.MeekCookieName != nil {
		return *x.MeekCookieName
	}
	return ""
}

func (x *DialParams) GetMeekDialDomain() string {
	if x != nil && x.MeekDialDomain != nil {
		return *x.MeekDialDomain
	}
	return ""
}

func (x *DialParams) GetMeekDialIpAddress() string {
	if x != nil && x.MeekDialIpAddress != nil {
		return *x.MeekDialIpAddress
	}
	return ""
}

func (x *DialParams) GetMeekHostHeader() string {
	if x != nil && x.MeekHostHeader != nil {
		return *x.MeekHostHeader
	}
	return ""
}

func (x *DialParams) GetMeekLimitRequest() int64 {
	if x != nil && x.MeekLimitRequest != nil {
		return *x.MeekLimitRequest
	}
	return 0
}

func (x *DialParams) GetMeekRedialProbability() int64 {
	if x != nil && x.MeekRedialProbability != nil {
		return *x.MeekRedialProbability
	}
	return 0
}

func (x *DialParams) GetMeekResolvedIpAddress() string {
	if x != nil && x.MeekResolvedIpAddress != nil {
		return *x.MeekResolvedIpAddress
	}
	return ""
}

func (x *DialParams) GetMeekSniServerName() string {
	if x != nil && x.MeekSniServerName != nil {
		return *x.MeekSniServerName
	}
	return ""
}

func (x *DialParams) GetMeekTlsPadding() int64 {
	if x != nil && x.MeekTlsPadding != nil {
		return *x.MeekTlsPadding
	}
	return 0
}

func (x *DialParams) GetMeekTransformedHostName() bool {
	if x != nil && x.MeekTransformedHostName != nil {
		return *x.MeekTransformedHostName
	}
	return false
}

func (x *DialParams) GetQuicDialEarly() bool {
	if x != nil && x.QuicDialEarly != nil {
		return *x.QuicDialEarly
	}
	return false
}

func (x *DialParams) GetQuicDialSniAddress() string {
	if x != nil && x.QuicDialSniAddress != nil {
		return *x.QuicDialSniAddress
	}
	return ""
}

func (x *DialParams) GetQuicDidResume() bool {
	if x != nil && x.QuicDidResume != nil {
		return *x.QuicDidResume
	}
	return false
}

func (x *DialParams) GetQuicDisableClientPathMtuDiscovery() bool {
	if x != nil && x.QuicDisableClientPathMtuDiscovery != nil {
		return *x.QuicDisableClientPathMtuDiscovery
	}
	return false
}

func (x *DialParams) GetQuicObfuscatedPsk() bool {
	if x != nil && x.QuicObfuscatedPsk != nil {
		return *x.QuicObfuscatedPsk
	}
	return false
}

func (x *DialParams) GetQuicSentTicket() bool {
	if x != nil && x.QuicSentTicket != nil {
		return *x.QuicSentTicket
	}
	return false
}

func (x *DialParams) GetQuicVersion() string {
	if x != nil && x.QuicVersion != nil {
		return *x.QuicVersion
	}
	return ""
}

func (x *DialParams) GetShadowsocksPrefix() string {
	if x != nil && x.ShadowsocksPrefix != nil {
		return *x.ShadowsocksPrefix
	}
	return ""
}

func (x *DialParams) GetTlsDidResume() bool {
	if x != nil && x.TlsDidResume != nil {
		return *x.TlsDidResume
	}
	return false
}

func (x *DialParams) GetTlsFragmented() bool {
	if x != nil && x.TlsFragmented != nil {
		return *x.TlsFragmented
	}
	return false
}

func (x *DialParams) GetTlsOsshSniServerName() string {
	if x != nil && x.TlsOsshSniServerName != nil {
		return *x.TlsOsshSniServerName
	}
	return ""
}

func (x *DialParams) GetTlsOsshTransformedHostName() bool {
	if x != nil && x.TlsOsshTransformedHostName != nil {
		return *x.TlsOsshTransformedHostName
	}
	return false
}

func (x *DialParams) GetTlsPadding() int64 {
	if x != nil && x.TlsPadding != nil {
		return *x.TlsPadding
	}
	return 0
}

func (x *DialParams) GetTlsProfile() string {
	if x != nil && x.TlsProfile != nil {
		return *x.TlsProfile
	}
	return ""
}

func (x *DialParams) GetTlsSentTicket() bool {
	if x != nil && x.TlsSentTicket != nil {
		return *x.TlsSentTicket
	}
	return false
}

func (x *DialParams) GetTlsVersion() string {
	if x != nil && x.TlsVersion != nil {
		return *x.TlsVersion
	}
	return ""
}

func (x *DialParams) GetServerEntryRegion() string {
	if x != nil && x.ServerEntryRegion != nil {
		return *x.ServerEntryRegion
	}
	return ""
}

func (x *DialParams) GetServerEntrySource() string {
	if x != nil && x.ServerEntrySource != nil {
		return *x.ServerEntrySource
	}
	return ""
}

func (x *DialParams) GetServerEntryTag() string {
	if x != nil && x.ServerEntryTag != nil {
		return *x.ServerEntryTag
	}
	return ""
}

func (x *DialParams) GetServerEntryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ServerEntryTimestamp
	}
	return nil
}

func (x *DialParams) GetServerPacketManipulation() string {
	if x != nil && x.ServerPacketManipulation != nil {
		return *x.ServerPacketManipulation
	}
	return ""
}

func (x *DialParams) GetServerReplayFragmentation() bool {
	if x != nil && x.ServerReplayFragmentation != nil {
		return *x.ServerReplayFragmentation
	}
	return false
}

func (x *DialParams) GetServerReplayPacketManipulation() bool {
	if x != nil && x.ServerReplayPacketManipulation != nil {
		return *x.ServerReplayPacketManipulation
	}
	return false
}

func (x *DialParams) GetServerEntryValid() bool {
	if x != nil && x.ServerEntryValid != nil {
		return *x.ServerEntryValid
	}
	return false
}

func (x *DialParams) GetCandidateNumber() int32 {
	if x != nil && x.CandidateNumber != nil {
		return *x.CandidateNumber
	}
	return 0
}

func (x *DialParams) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *DialParams) GetDialPortNumber() int64 {
	if x != nil && x.DialPortNumber != nil {
		return *x.DialPortNumber
	}
	return 0
}

func (x *DialParams) GetDialDuration() int64 {
	if x != nil && x.DialDuration != nil {
		return *x.DialDuration
	}
	return 0
}

func (x *DialParams) GetFrontingProviderId() string {
	if x != nil && x.FrontingProviderId != nil {
		return *x.FrontingProviderId
	}
	return ""
}

func (x *DialParams) GetNetworkType() string {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return ""
}

func (x *DialParams) GetRelayProtocol() string {
	if x != nil && x.RelayProtocol != nil {
		return *x.RelayProtocol
	}
	return ""
}

func (x *DialParams) GetSshClientVersion() string {
	if x != nil && x.SshClientVersion != nil {
		return *x.SshClientVersion
	}
	return ""
}

func (x *DialParams) GetOsshPrefix() string {
	if x != nil && x.OsshPrefix != nil {
		return *x.OsshPrefix
	}
	return ""
}

func (x *DialParams) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *DialParams) GetHttpTransform() string {
	if x != nil && x.HttpTransform != nil {
		return *x.HttpTransform
	}
	return ""
}

func (x *DialParams) GetDnsAttempt() int64 {
	if x != nil && x.DnsAttempt != nil {
		return *x.DnsAttempt
	}
	return 0
}

func (x *DialParams) GetDnsPreferred() string {
	if x != nil && x.DnsPreferred != nil {
		return *x.DnsPreferred
	}
	return ""
}

func (x *DialParams) GetDnsPreresolved() string {
	if x != nil && x.DnsPreresolved != nil {
		return *x.DnsPreresolved
	}
	return ""
}

func (x *DialParams) GetDnsQnameMismatches() int64 {
	if x != nil && x.DnsQnameMismatches != nil {
		return *x.DnsQnameMismatches
	}
	return 0
}

func (x *DialParams) GetDnsQnameRandomCasing() bool {
	if x != nil && x.DnsQnameRandomCasing != nil {
		return *x.DnsQnameRandomCasing
	}
	return false
}

func (x *DialParams) GetDnsTransform() string {
	if x != nil && x.DnsTransform != nil {
		return *x.DnsTransform
	}
	return ""
}

func (x *DialParams) GetDownstreamBytesFragmented() int64 {
	if x != nil && x.DownstreamBytesFragmented != nil {
		return *x.DownstreamBytesFragmented
	}
	return 0
}

func (x *DialParams) GetDownstreamMaxBytesWritten() int64 {
	if x != nil && x.DownstreamMaxBytesWritten != nil {
		return *x.DownstreamMaxBytesWritten
	}
	return 0
}

func (x *DialParams) GetDownstreamMaxDelayed() int64 {
	if x != nil && x.DownstreamMaxDelayed != nil {
		return *x.DownstreamMaxDelayed
	}
	return 0
}

func (x *DialParams) GetDownstreamMinBytesWritten() int64 {
	if x != nil && x.DownstreamMinBytesWritten != nil {
		return *x.DownstreamMinBytesWritten
	}
	return 0
}

func (x *DialParams) GetDownstreamMinDelayed() int64 {
	if x != nil && x.DownstreamMinDelayed != nil {
		return *x.DownstreamMinDelayed
	}
	return 0
}

func (x *DialParams) GetDownstreamOsshPadding() int64 {
	if x != nil && x.DownstreamOsshPadding != nil {
		return *x.DownstreamOsshPadding
	}
	return 0
}

func (x *DialParams) GetUpstreamBytesFragmented() int64 {
	if x != nil && x.UpstreamBytesFragmented != nil {
		return *x.UpstreamBytesFragmented
	}
	return 0
}

func (x *DialParams) GetUpstreamMaxBytesWritten() int64 {
	if x != nil && x.UpstreamMaxBytesWritten != nil {
		return *x.UpstreamMaxBytesWritten
	}
	return 0
}

func (x *DialParams) GetUpstreamMaxDelayed() int64 {
	if x != nil && x.UpstreamMaxDelayed != nil {
		return *x.UpstreamMaxDelayed
	}
	return 0
}

func (x *DialParams) GetUpstreamMinBytesWritten() int64 {
	if x != nil && x.UpstreamMinBytesWritten != nil {
		return *x.UpstreamMinBytesWritten
	}
	return 0
}

func (x *DialParams) GetUpstreamMinDelayed() int64 {
	if x != nil && x.UpstreamMinDelayed != nil {
		return *x.UpstreamMinDelayed
	}
	return 0
}

func (x *DialParams) GetUpstreamOsshPadding() int64 {
	if x != nil && x.UpstreamOsshPadding != nil {
		return *x.UpstreamOsshPadding
	}
	return 0
}

func (x *DialParams) GetUpstreamProxyCustomHeaderNames() []string {
	if x != nil {
		return x.UpstreamProxyCustomHeaderNames
	}
	return nil
}

func (x *DialParams) GetUpstreamProxyType() string {
	if x != nil && x.UpstreamProxyType != nil {
		return *x.UpstreamProxyType
	}
	return ""
}

func (x *DialParams) GetPassthroughAddress() string {
	if x != nil && x.PassthroughAddress != nil {
		return *x.PassthroughAddress
	}
	return ""
}

func (x *DialParams) GetPadResponse() int64 {
	if x != nil && x.PadResponse != nil {
		return *x.PadResponse
	}
	return 0
}

func (x *DialParams) GetPadding() int64 {
	if x != nil && x.Padding != nil {
		return *x.Padding
	}
	return 0
}

func (x *DialParams) GetClientBpf() string {
	if x != nil && x.ClientBpf != nil {
		return *x.ClientBpf
	}
	return ""
}

func (x *DialParams) GetServerBpf() string {
	if x != nil && x.ServerBpf != nil {
		return *x.ServerBpf
	}
	return ""
}

func (x *DialParams) GetEstablishedTunnelsCount() int64 {
	if x != nil && x.EstablishedTunnelsCount != nil {
		return *x.EstablishedTunnelsCount
	}
	return 0
}

func (x *DialParams) GetNetworkLatencyMultiplier() float64 {
	if x != nil && x.NetworkLatencyMultiplier != nil {
		return *x.NetworkLatencyMultiplier
	}
	return 0
}

func (x *DialParams) GetSeedTransform() string {
	if x != nil && x.SeedTransform != nil {
		return *x.SeedTransform
	}
	return ""
}

var File_ca_psiphon_psiphond_dial_params_proto protoreflect.FileDescriptor

const file_ca_psiphon_psiphond_dial_params_proto_rawDesc = "" +
	"\n" +
	"%ca.psiphon.psiphond/dial_params.proto\x12\x13ca.psiphon.psiphond\x1a\x1fgoogle/protobuf/timestamp.proto\"\xeb0\n" +
	"\n" +
	"DialParams\x12*\n" +
	"\x0econjure_cached\x18\x01 \x01(\bH\x00R\rconjureCached\x88\x01\x01\x12(\n" +
	"\rconjure_delay\x18\x02 \x01(\x03H\x01R\fconjureDelay\x88\x01\x01\x125\n" +
	"\x14conjure_empty_packet\x18\x03 \x01(\bH\x02R\x12conjureEmptyPacket\x88\x01\x01\x12,\n" +
	"\x0fconjure_network\x18\x04 \x01(\tH\x03R\x0econjureNetwork\x88\x01\x01\x123\n" +
	"\x13conjure_port_number\x18\x05 \x01(\x03H\x04R\x11conjurePortNumber\x88\x01\x01\x12*\n" +
	"\x0econjure_prefix\x18\x06 \x01(\tH\x05R\rconjurePrefix\x88\x01\x01\x12&\n" +
	"\fconjure_stun\x18\a \x01(\tH\x06R\vconjureStun\x88\x01\x01\x120\n" +
	"\x11conjure_transport\x18\b \x01(\tH\aR\x10conjureTransport\x88\x01\x01\x12-\n" +
	"\x10meek_cookie_size\x18\t \x01(\x03H\bR\x0emeekCookieSize\x88\x01\x01\x12/\n" +
	"\x11meek_content_type\x18\n" +
	" \x01(\tH\tR\x0fmeekContentType\x88\x01\x01\x12-\n" +
	"\x10meek_cookie_name\x18\v \x01(\tH\n" +
	"R\x0emeekCookieName\x88\x01\x01\x12-\n" +
	"\x10meek_dial_domain\x18\f \x01(\tH\vR\x0emeekDialDomain\x88\x01\x01\x124\n" +
	"\x14meek_dial_ip_address\x18\r \x01(\tH\fR\x11meekDialIpAddress\x88\x01\x01\x12-\n" +
	"\x10meek_host_header\x18\x0e \x01(\tH\rR\x0emeekHostHeader\x88\x01\x01\x121\n" +
	"\x12meek_limit_request\x18\x0f \x01(\x03H\x0eR\x10meekLimitRequest\x88\x01\x01\x12;\n" +
	"\x17meek_redial_probability\x18\x10 \x01(\x03H\x0fR\x15meekRedialProbability\x88\x01\x01\x12<\n" +
	"\x18meek_resolved_ip_address\x18\x11 \x01(\tH\x10R\x15meekResolvedIpAddress\x88\x01\x01\x124\n" +
	"\x14meek_sni_server_name\x18\x12 \x01(\tH\x11R\x11meekSniServerName\x88\x01\x01\x12-\n" +
	"\x10meek_tls_padding\x18\x13 \x01(\x03H\x12R\x0emeekTlsPadding\x88\x01\x01\x12@\n" +
	"\x1ameek_transformed_host_name\x18\x14 \x01(\bH\x13R\x17meekTransformedHostName\x88\x01\x01\x12+\n" +
	"\x0fquic_dial_early\x18\x15 \x01(\bH\x14R\rquicDialEarly\x88\x01\x01\x126\n" +
	"\x15quic_dial_sni_address\x18\x16 \x01(\tH\x15R\x12quicDialSniAddress\x88\x01\x01\x12+\n" +
	"\x0fquic_did_resume\x18\x17 \x01(\bH\x16R\rquicDidResume\x88\x01\x01\x12V\n" +
	"&quic_disable_client_path_mtu_discovery\x18\x18 \x01(\bH\x17R!quicDisableClientPathMtuDiscovery\x88\x01\x01\x123\n" +
	"\x13quic_obfuscated_psk\x18\x19 \x01(\bH\x18R\x11quicObfuscatedPsk\x88\x01\x01\x12-\n" +
	"\x10quic_sent_ticket\x18\x1a \x01(\bH\x19R\x0equicSentTicket\x88\x01\x01\x12&\n" +
	"\fquic_version\x18\x1b \x01(\tH\x1aR\vquicVersion\x88\x01\x01\x122\n" +
	"\x12shadowsocks_prefix\x18\x1c \x01(\tH\x1bR\x11shadowsocksPrefix\x88\x01\x01\x12)\n" +
	"\x0etls_did_resume\x18\x1d \x01(\bH\x1cR\ftlsDidResume\x88\x01\x01\x12*\n" +
	"\x0etls_fragmented\x18\x1e \x01(\bH\x1dR\rtlsFragmented\x88\x01\x01\x12;\n" +
	"\x18tls_ossh_sni_server_name\x18\x1f \x01(\tH\x1eR\x14tlsOsshSniServerName\x88\x01\x01\x12G\n" +
	"\x1etls_ossh_transformed_host_name\x18  \x01(\bH\x1fR\x1atlsOsshTransformedHostName\x88\x01\x01\x12$\n" +
	"\vtls_padding\x18! \x01(\x03H R\n" +
	"tlsPadding\x88\x01\x01\x12$\n" +
	"\vtls_profile\x18\" \x01(\tH!R\n" +
	"tlsProfile\x88\x01\x01\x12+\n" +
	"\x0ftls_sent_ticket\x18# \x01(\bH\"R\rtlsSentTicket\x88\x01\x01\x12$\n" +
	"\vtls_version\x18$ \x01(\tH#R\n" +
	"tlsVersion\x88\x01\x01\x123\n" +
	"\x13server_entry_region\x18% \x01(\tH$R\x11serverEntryRegion\x88\x01\x01\x123\n" +
	"\x13server_entry_source\x18& \x01(\tH%R\x11serverEntrySource\x88\x01\x01\x12-\n" +
	"\x10server_entry_tag\x18' \x01(\tH&R\x0eserverEntryTag\x88\x01\x01\x12U\n" +
	"\x16server_entry_timestamp\x18( \x01(\v2\x1a.google.protobuf.TimestampH'R\x14serverEntryTimestamp\x88\x01\x01\x12A\n" +
	"\x1aserver_packet_manipulation\x18) \x01(\tH(R\x18serverPacketManipulation\x88\x01\x01\x12C\n" +
	"\x1bserver_replay_fragmentation\x18* \x01(\bH)R\x19serverReplayFragmentation\x88\x01\x01\x12N\n" +
	"!server_replay_packet_manipulation\x18+ \x01(\bH*R\x1eserverReplayPacketManipulation\x88\x01\x01\x121\n" +
	"\x12server_entry_valid\x18, \x01(\bH+R\x10serverEntryValid\x88\x01\x01\x12.\n" +
	"\x10candidate_number\x18- \x01(\x05H,R\x0fcandidateNumber\x88\x01\x01\x12 \n" +
	"\tis_replay\x18. \x01(\bH-R\bisReplay\x88\x01\x01\x12-\n" +
	"\x10dial_port_number\x18/ \x01(\x03H.R\x0edialPortNumber\x88\x01\x01\x12(\n" +
	"\rdial_duration\x180 \x01(\x03H/R\fdialDuration\x88\x01\x01\x125\n" +
	"\x14fronting_provider_id\x181 \x01(\tH0R\x12frontingProviderId\x88\x01\x01\x12&\n" +
	"\fnetwork_type\x182 \x01(\tH1R\vnetworkType\x88\x01\x01\x12*\n" +
	"\x0erelay_protocol\x183 \x01(\tH2R\rrelayProtocol\x88\x01\x01\x121\n" +
	"\x12ssh_client_version\x184 \x01(\tH3R\x10sshClientVersion\x88\x01\x01\x12$\n" +
	"\vossh_prefix\x185 \x01(\tH4R\n" +
	"osshPrefix\x88\x01\x01\x12\"\n" +
	"\n" +
	"user_agent\x186 \x01(\tH5R\tuserAgent\x88\x01\x01\x12*\n" +
	"\x0ehttp_transform\x187 \x01(\tH6R\rhttpTransform\x88\x01\x01\x12$\n" +
	"\vdns_attempt\x188 \x01(\x03H7R\n" +
	"dnsAttempt\x88\x01\x01\x12(\n" +
	"\rdns_preferred\x189 \x01(\tH8R\fdnsPreferred\x88\x01\x01\x12,\n" +
	"\x0fdns_preresolved\x18: \x01(\tH9R\x0ednsPreresolved\x88\x01\x01\x125\n" +
	"\x14dns_qname_mismatches\x18; \x01(\x03H:R\x12dnsQnameMismatches\x88\x01\x01\x12:\n" +
	"\x17dns_qname_random_casing\x18< \x01(\bH;R\x14dnsQnameRandomCasing\x88\x01\x01\x12(\n" +
	"\rdns_transform\x18= \x01(\tH<R\fdnsTransform\x88\x01\x01\x12C\n" +
	"\x1bdownstream_bytes_fragmented\x18> \x01(\x03H=R\x19downstreamBytesFragmented\x88\x01\x01\x12D\n" +
	"\x1cdownstream_max_bytes_written\x18? \x01(\x03H>R\x19downstreamMaxBytesWritten\x88\x01\x01\x129\n" +
	"\x16downstream_max_delayed\x18@ \x01(\x03H?R\x14downstreamMaxDelayed\x88\x01\x01\x12D\n" +
	"\x1cdownstream_min_bytes_written\x18A \x01(\x03H@R\x19downstreamMinBytesWritten\x88\x01\x01\x129\n" +
	"\x16downstream_min_delayed\x18B \x01(\x03HAR\x14downstreamMinDelayed\x88\x01\x01\x12;\n" +
	"\x17downstream_ossh_padding\x18C \x01(\x03HBR\x15downstreamOsshPadding\x88\x01\x01\x12?\n" +
	"\x19upstream_bytes_fragmented\x18D \x01(\x03HCR\x17upstreamBytesFragmented\x88\x01\x01\x12@\n" +
	"\x1aupstream_max_bytes_written\x18E \x01(\x03HDR\x17upstreamMaxBytesWritten\x88\x01\x01\x125\n" +
	"\x14upstream_max_delayed\x18F \x01(\x03HER\x12upstreamMaxDelayed\x88\x01\x01\x12@\n" +
	"\x1aupstream_min_bytes_written\x18G \x01(\x03HFR\x17upstreamMinBytesWritten\x88\x01\x01\x125\n" +
	"\x14upstream_min_delayed\x18H \x01(\x03HGR\x12upstreamMinDelayed\x88\x01\x01\x127\n" +
	"\x15upstream_ossh_padding\x18I \x01(\x03HHR\x13upstreamOsshPadding\x88\x01\x01\x12J\n" +
	"\"upstream_proxy_custom_header_names\x18J \x03(\tR\x1eupstreamProxyCustomHeaderNames\x123\n" +
	"\x13upstream_proxy_type\x18K \x01(\tHIR\x11upstreamProxyType\x88\x01\x01\x124\n" +
	"\x13passthrough_address\x18L \x01(\tHJR\x12passthroughAddress\x88\x01\x01\x12&\n" +
	"\fpad_response\x18M \x01(\x03HKR\vpadResponse\x88\x01\x01\x12\x1d\n" +
	"\apadding\x18N \x01(\x03HLR\apadding\x88\x01\x01\x12\"\n" +
	"\n" +
	"client_bpf\x18O \x01(\tHMR\tclientBpf\x88\x01\x01\x12\"\n" +
	"\n" +
	"server_bpf\x18P \x01(\tHNR\tserverBpf\x88\x01\x01\x12?\n" +
	"\x19established_tunnels_count\x18Q \x01(\x03HOR\x17establishedTunnelsCount\x88\x01\x01\x12A\n" +
	"\x1anetwork_latency_multiplier\x18R \x01(\x01HPR\x18networkLatencyMultiplier\x88\x01\x01\x12*\n" +
	"\x0eseed_transform\x18S \x01(\tHQR\rseedTransform\x88\x01\x01B\x11\n" +
	"\x0f_conjure_cachedB\x10\n" +
	"\x0e_conjure_delayB\x17\n" +
	"\x15_conjure_empty_packetB\x12\n" +
	"\x10_conjure_networkB\x16\n" +
	"\x14_conjure_port_numberB\x11\n" +
	"\x0f_conjure_prefixB\x0f\n" +
	"\r_conjure_stunB\x14\n" +
	"\x12_conjure_transportB\x13\n" +
	"\x11_meek_cookie_sizeB\x14\n" +
	"\x12_meek_content_typeB\x13\n" +
	"\x11_meek_cookie_nameB\x13\n" +
	"\x11_meek_dial_domainB\x17\n" +
	"\x15_meek_dial_ip_addressB\x13\n" +
	"\x11_meek_host_headerB\x15\n" +
	"\x13_meek_limit_requestB\x1a\n" +
	"\x18_meek_redial_probabilityB\x1b\n" +
	"\x19_meek_resolved_ip_addressB\x17\n" +
	"\x15_meek_sni_server_nameB\x13\n" +
	"\x11_meek_tls_paddingB\x1d\n" +
	"\x1b_meek_transformed_host_nameB\x12\n" +
	"\x10_quic_dial_earlyB\x18\n" +
	"\x16_quic_dial_sni_addressB\x12\n" +
	"\x10_quic_did_resumeB)\n" +
	"'_quic_disable_client_path_mtu_discoveryB\x16\n" +
	"\x14_quic_obfuscated_pskB\x13\n" +
	"\x11_quic_sent_ticketB\x0f\n" +
	"\r_quic_versionB\x15\n" +
	"\x13_shadowsocks_prefixB\x11\n" +
	"\x0f_tls_did_resumeB\x11\n" +
	"\x0f_tls_fragmentedB\x1b\n" +
	"\x19_tls_ossh_sni_server_nameB!\n" +
	"\x1f_tls_ossh_transformed_host_nameB\x0e\n" +
	"\f_tls_paddingB\x0e\n" +
	"\f_tls_profileB\x12\n" +
	"\x10_tls_sent_ticketB\x0e\n" +
	"\f_tls_versionB\x16\n" +
	"\x14_server_entry_regionB\x16\n" +
	"\x14_server_entry_sourceB\x13\n" +
	"\x11_server_entry_tagB\x19\n" +
	"\x17_server_entry_timestampB\x1d\n" +
	"\x1b_server_packet_manipulationB\x1e\n" +
	"\x1c_server_replay_fragmentationB$\n" +
	"\"_server_replay_packet_manipulationB\x15\n" +
	"\x13_server_entry_validB\x13\n" +
	"\x11_candidate_numberB\f\n" +
	"\n" +
	"_is_replayB\x13\n" +
	"\x11_dial_port_numberB\x10\n" +
	"\x0e_dial_durationB\x17\n" +
	"\x15_fronting_provider_idB\x0f\n" +
	"\r_network_typeB\x11\n" +
	"\x0f_relay_protocolB\x15\n" +
	"\x13_ssh_client_versionB\x0e\n" +
	"\f_ossh_prefixB\r\n" +
	"\v_user_agentB\x11\n" +
	"\x0f_http_transformB\x0e\n" +
	"\f_dns_attemptB\x10\n" +
	"\x0e_dns_preferredB\x12\n" +
	"\x10_dns_preresolvedB\x17\n" +
	"\x15_dns_qname_mismatchesB\x1a\n" +
	"\x18_dns_qname_random_casingB\x10\n" +
	"\x0e_dns_transformB\x1e\n" +
	"\x1c_downstream_bytes_fragmentedB\x1f\n" +
	"\x1d_downstream_max_bytes_writtenB\x19\n" +
	"\x17_downstream_max_delayedB\x1f\n" +
	"\x1d_downstream_min_bytes_writtenB\x19\n" +
	"\x17_downstream_min_delayedB\x1a\n" +
	"\x18_downstream_ossh_paddingB\x1c\n" +
	"\x1a_upstream_bytes_fragmentedB\x1d\n" +
	"\x1b_upstream_max_bytes_writtenB\x17\n" +
	"\x15_upstream_max_delayedB\x1d\n" +
	"\x1b_upstream_min_bytes_writtenB\x17\n" +
	"\x15_upstream_min_delayedB\x18\n" +
	"\x16_upstream_ossh_paddingB\x16\n" +
	"\x14_upstream_proxy_typeB\x16\n" +
	"\x14_passthrough_addressB\x0f\n" +
	"\r_pad_responseB\n" +
	"\n" +
	"\b_paddingB\r\n" +
	"\v_client_bpfB\r\n" +
	"\v_server_bpfB\x1c\n" +
	"\x1a_established_tunnels_countB\x1d\n" +
	"\x1b_network_latency_multiplierB\x11\n" +
	"\x0f_seed_transformBHZFgithub.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pb/psiphondb\x06proto3"

var (
	file_ca_psiphon_psiphond_dial_params_proto_rawDescOnce sync.Once
	file_ca_psiphon_psiphond_dial_params_proto_rawDescData []byte
)

func file_ca_psiphon_psiphond_dial_params_proto_rawDescGZIP() []byte {
	file_ca_psiphon_psiphond_dial_params_proto_rawDescOnce.Do(func() {
		file_ca_psiphon_psiphond_dial_params_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_dial_params_proto_rawDesc), len(file_ca_psiphon_psiphond_dial_params_proto_rawDesc)))
	})
	return file_ca_psiphon_psiphond_dial_params_proto_rawDescData
}

var file_ca_psiphon_psiphond_dial_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ca_psiphon_psiphond_dial_params_proto_goTypes = []any{
	(*DialParams)(nil),            // 0: ca.psiphon.psiphond.DialParams
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_ca_psiphon_psiphond_dial_params_proto_depIdxs = []int32{
	1, // 0: ca.psiphon.psiphond.DialParams.server_entry_timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ca_psiphon_psiphond_dial_params_proto_init() }
func file_ca_psiphon_psiphond_dial_params_proto_init() {
	if File_ca_psiphon_psiphond_dial_params_proto != nil {
		return
	}
	file_ca_psiphon_psiphond_dial_params_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_dial_params_proto_rawDesc), len(file_ca_psiphon_psiphond_dial_params_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ca_psiphon_psiphond_dial_params_proto_goTypes,
		DependencyIndexes: file_ca_psiphon_psiphond_dial_params_proto_depIdxs,
		MessageInfos:      file_ca_psiphon_psiphond_dial_params_proto_msgTypes,
	}.Build()
	File_ca_psiphon_psiphond_dial_params_proto = out.File
	file_ca_psiphon_psiphond_dial_params_proto_goTypes = nil
	file_ca_psiphon_psiphond_dial_params_proto_depIdxs = nil
}
