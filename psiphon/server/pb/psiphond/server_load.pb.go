// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: ca.psiphon.psiphond/server_load.proto

package psiphond

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerLoadProtocol struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Region             *string                `protobuf:"bytes,100,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Protocol           *string                `protobuf:"bytes,101,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	AcceptedClients    *int64                 `protobuf:"varint,102,opt,name=accepted_clients,json=acceptedClients,proto3,oneof" json:"accepted_clients,omitempty"`
	EstablishedClients *int64                 `protobuf:"varint,103,opt,name=established_clients,json=establishedClients,proto3,oneof" json:"established_clients,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServerLoadProtocol) Reset() {
	*x = ServerLoadProtocol{}
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLoadProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLoadProtocol) ProtoMessage() {}

func (x *ServerLoadProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLoadProtocol.ProtoReflect.Descriptor instead.
func (*ServerLoadProtocol) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_server_load_proto_rawDescGZIP(), []int{0}
}

func (x *ServerLoadProtocol) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *ServerLoadProtocol) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *ServerLoadProtocol) GetAcceptedClients() int64 {
	if x != nil && x.AcceptedClients != nil {
		return *x.AcceptedClients
	}
	return 0
}

func (x *ServerLoadProtocol) GetEstablishedClients() int64 {
	if x != nil && x.EstablishedClients != nil {
		return *x.EstablishedClients
	}
	return 0
}

type ServerLoadDNS struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DnsServer         *string                `protobuf:"bytes,100,opt,name=dns_server,json=dnsServer,proto3,oneof" json:"dns_server,omitempty"`
	DnsCount          *int64                 `protobuf:"varint,101,opt,name=dns_count,json=dnsCount,proto3,oneof" json:"dns_count,omitempty"`
	DnsDuration       *int64                 `protobuf:"varint,102,opt,name=dns_duration,json=dnsDuration,proto3,oneof" json:"dns_duration,omitempty"`
	DnsFailedCount    *int64                 `protobuf:"varint,103,opt,name=dns_failed_count,json=dnsFailedCount,proto3,oneof" json:"dns_failed_count,omitempty"`
	DnsFailedDuration *int64                 `protobuf:"varint,104,opt,name=dns_failed_duration,json=dnsFailedDuration,proto3,oneof" json:"dns_failed_duration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServerLoadDNS) Reset() {
	*x = ServerLoadDNS{}
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLoadDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLoadDNS) ProtoMessage() {}

func (x *ServerLoadDNS) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLoadDNS.ProtoReflect.Descriptor instead.
func (*ServerLoadDNS) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_server_load_proto_rawDescGZIP(), []int{1}
}

func (x *ServerLoadDNS) GetDnsServer() string {
	if x != nil && x.DnsServer != nil {
		return *x.DnsServer
	}
	return ""
}

func (x *ServerLoadDNS) GetDnsCount() int64 {
	if x != nil && x.DnsCount != nil {
		return *x.DnsCount
	}
	return 0
}

func (x *ServerLoadDNS) GetDnsDuration() int64 {
	if x != nil && x.DnsDuration != nil {
		return *x.DnsDuration
	}
	return 0
}

func (x *ServerLoadDNS) GetDnsFailedCount() int64 {
	if x != nil && x.DnsFailedCount != nil {
		return *x.DnsFailedCount
	}
	return 0
}

func (x *ServerLoadDNS) GetDnsFailedDuration() int64 {
	if x != nil && x.DnsFailedDuration != nil {
		return *x.DnsFailedDuration
	}
	return 0
}

type ServerLoad struct {
	state                                   protoimpl.MessageState `protogen:"open.v1"`
	CpuPercent                              *float64               `protobuf:"fixed64,100,opt,name=cpu_percent,json=cpuPercent,proto3,oneof" json:"cpu_percent,omitempty"`
	HeapAlloc                               *uint64                `protobuf:"varint,101,opt,name=heap_alloc,json=heapAlloc,proto3,oneof" json:"heap_alloc,omitempty"`
	HeapIdle                                *uint64                `protobuf:"varint,102,opt,name=heap_idle,json=heapIdle,proto3,oneof" json:"heap_idle,omitempty"`
	HeapInuse                               *uint64                `protobuf:"varint,103,opt,name=heap_inuse,json=heapInuse,proto3,oneof" json:"heap_inuse,omitempty"`
	HeapObjects                             *uint64                `protobuf:"varint,104,opt,name=heap_objects,json=heapObjects,proto3,oneof" json:"heap_objects,omitempty"`
	HeapReleased                            *uint64                `protobuf:"varint,105,opt,name=heap_released,json=heapReleased,proto3,oneof" json:"heap_released,omitempty"`
	HeapSys                                 *uint64                `protobuf:"varint,106,opt,name=heap_sys,json=heapSys,proto3,oneof" json:"heap_sys,omitempty"`
	NetworkBytesReceived                    *int64                 `protobuf:"varint,107,opt,name=network_bytes_received,json=networkBytesReceived,proto3,oneof" json:"network_bytes_received,omitempty"`
	NetworkBytesSent                        *int64                 `protobuf:"varint,108,opt,name=network_bytes_sent,json=networkBytesSent,proto3,oneof" json:"network_bytes_sent,omitempty"`
	EstablishTunnels                        *bool                  `protobuf:"varint,109,opt,name=establish_tunnels,json=establishTunnels,proto3,oneof" json:"establish_tunnels,omitempty"`
	EstablishTunnelsLimitedCount            *int64                 `protobuf:"varint,110,opt,name=establish_tunnels_limited_count,json=establishTunnelsLimitedCount,proto3,oneof" json:"establish_tunnels_limited_count,omitempty"`
	LastGc                                  *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=last_gc,json=lastGc,proto3,oneof" json:"last_gc,omitempty"`
	NumForcedGc                             *uint32                `protobuf:"varint,112,opt,name=num_forced_gc,json=numForcedGc,proto3,oneof" json:"num_forced_gc,omitempty"`
	NumGc                                   *uint32                `protobuf:"varint,113,opt,name=num_gc,json=numGc,proto3,oneof" json:"num_gc,omitempty"`
	NumGoroutine                            *uint32                `protobuf:"varint,114,opt,name=num_goroutine,json=numGoroutine,proto3,oneof" json:"num_goroutine,omitempty"`
	ReplayDeleteReplayCount                 *int64                 `protobuf:"varint,115,opt,name=replay_delete_replay_count,json=replayDeleteReplayCount,proto3,oneof" json:"replay_delete_replay_count,omitempty"`
	ReplayFailedReplayCount                 *int64                 `protobuf:"varint,116,opt,name=replay_failed_replay_count,json=replayFailedReplayCount,proto3,oneof" json:"replay_failed_replay_count,omitempty"`
	ReplayGetReplayHitCount                 *int64                 `protobuf:"varint,117,opt,name=replay_get_replay_hit_count,json=replayGetReplayHitCount,proto3,oneof" json:"replay_get_replay_hit_count,omitempty"`
	ReplayGetReplayMissCount                *int64                 `protobuf:"varint,118,opt,name=replay_get_replay_miss_count,json=replayGetReplayMissCount,proto3,oneof" json:"replay_get_replay_miss_count,omitempty"`
	ReplayMaxCacheEntries                   *int64                 `protobuf:"varint,119,opt,name=replay_max_cache_entries,json=replayMaxCacheEntries,proto3,oneof" json:"replay_max_cache_entries,omitempty"`
	ReplaySetReplayCount                    *int64                 `protobuf:"varint,120,opt,name=replay_set_replay_count,json=replaySetReplayCount,proto3,oneof" json:"replay_set_replay_count,omitempty"`
	ServerTacticsCacheHitCount              *int64                 `protobuf:"varint,121,opt,name=server_tactics_cache_hit_count,json=serverTacticsCacheHitCount,proto3,oneof" json:"server_tactics_cache_hit_count,omitempty"`
	ServerTacticsCacheMissCount             *int64                 `protobuf:"varint,122,opt,name=server_tactics_cache_miss_count,json=serverTacticsCacheMissCount,proto3,oneof" json:"server_tactics_cache_miss_count,omitempty"`
	ServerTacticsMaxCacheEntries            *int64                 `protobuf:"varint,123,opt,name=server_tactics_max_cache_entries,json=serverTacticsMaxCacheEntries,proto3,oneof" json:"server_tactics_max_cache_entries,omitempty"`
	ServerTacticsMaxParameterReferences     *int64                 `protobuf:"varint,124,opt,name=server_tactics_max_parameter_references,json=serverTacticsMaxParameterReferences,proto3,oneof" json:"server_tactics_max_parameter_references,omitempty"`
	DialingTcpPortForwards                  *int64                 `protobuf:"varint,125,opt,name=dialing_tcp_port_forwards,json=dialingTcpPortForwards,proto3,oneof" json:"dialing_tcp_port_forwards,omitempty"`
	TcpIpv4PortForwardDialedCount           *int64                 `protobuf:"varint,126,opt,name=tcp_ipv4_port_forward_dialed_count,json=tcpIpv4PortForwardDialedCount,proto3,oneof" json:"tcp_ipv4_port_forward_dialed_count,omitempty"`
	TcpIpv4PortForwardDialedDuration        *int64                 `protobuf:"varint,127,opt,name=tcp_ipv4_port_forward_dialed_duration,json=tcpIpv4PortForwardDialedDuration,proto3,oneof" json:"tcp_ipv4_port_forward_dialed_duration,omitempty"`
	TcpIpv4PortForwardFailedCount           *int64                 `protobuf:"varint,128,opt,name=tcp_ipv4_port_forward_failed_count,json=tcpIpv4PortForwardFailedCount,proto3,oneof" json:"tcp_ipv4_port_forward_failed_count,omitempty"`
	TcpIpv4PortForwardFailedDuration        *int64                 `protobuf:"varint,129,opt,name=tcp_ipv4_port_forward_failed_duration,json=tcpIpv4PortForwardFailedDuration,proto3,oneof" json:"tcp_ipv4_port_forward_failed_duration,omitempty"`
	TcpIpv6PortForwardDialedCount           *int64                 `protobuf:"varint,130,opt,name=tcp_ipv6_port_forward_dialed_count,json=tcpIpv6PortForwardDialedCount,proto3,oneof" json:"tcp_ipv6_port_forward_dialed_count,omitempty"`
	TcpIpv6PortForwardDialedDuration        *int64                 `protobuf:"varint,131,opt,name=tcp_ipv6_port_forward_dialed_duration,json=tcpIpv6PortForwardDialedDuration,proto3,oneof" json:"tcp_ipv6_port_forward_dialed_duration,omitempty"`
	TcpIpv6PortForwardFailedCount           *int64                 `protobuf:"varint,132,opt,name=tcp_ipv6_port_forward_failed_count,json=tcpIpv6PortForwardFailedCount,proto3,oneof" json:"tcp_ipv6_port_forward_failed_count,omitempty"`
	TcpIpv6PortForwardFailedDuration        *int64                 `protobuf:"varint,133,opt,name=tcp_ipv6_port_forward_failed_duration,json=tcpIpv6PortForwardFailedDuration,proto3,oneof" json:"tcp_ipv6_port_forward_failed_duration,omitempty"`
	TcpPortForwardDialedCount               *int64                 `protobuf:"varint,134,opt,name=tcp_port_forward_dialed_count,json=tcpPortForwardDialedCount,proto3,oneof" json:"tcp_port_forward_dialed_count,omitempty"`
	TcpPortForwardDialedDuration            *int64                 `protobuf:"varint,135,opt,name=tcp_port_forward_dialed_duration,json=tcpPortForwardDialedDuration,proto3,oneof" json:"tcp_port_forward_dialed_duration,omitempty"`
	TcpPortForwardFailedCount               *int64                 `protobuf:"varint,136,opt,name=tcp_port_forward_failed_count,json=tcpPortForwardFailedCount,proto3,oneof" json:"tcp_port_forward_failed_count,omitempty"`
	TcpPortForwardFailedDuration            *int64                 `protobuf:"varint,137,opt,name=tcp_port_forward_failed_duration,json=tcpPortForwardFailedDuration,proto3,oneof" json:"tcp_port_forward_failed_duration,omitempty"`
	TcpPortForwardRejectedDialingLimitCount *int64                 `protobuf:"varint,138,opt,name=tcp_port_forward_rejected_dialing_limit_count,json=tcpPortForwardRejectedDialingLimitCount,proto3,oneof" json:"tcp_port_forward_rejected_dialing_limit_count,omitempty"`
	TcpPortForwardRejectedDisallowedCount   *int64                 `protobuf:"varint,139,opt,name=tcp_port_forward_rejected_disallowed_count,json=tcpPortForwardRejectedDisallowedCount,proto3,oneof" json:"tcp_port_forward_rejected_disallowed_count,omitempty"`
	TcpPortForwards                         *int64                 `protobuf:"varint,140,opt,name=tcp_port_forwards,json=tcpPortForwards,proto3,oneof" json:"tcp_port_forwards,omitempty"`
	UdpPortForwardRejectedDisallowedCount   *int64                 `protobuf:"varint,141,opt,name=udp_port_forward_rejected_disallowed_count,json=udpPortForwardRejectedDisallowedCount,proto3,oneof" json:"udp_port_forward_rejected_disallowed_count,omitempty"`
	UdpPortForwards                         *int64                 `protobuf:"varint,142,opt,name=udp_port_forwards,json=udpPortForwards,proto3,oneof" json:"udp_port_forwards,omitempty"`
	TotalTcpPortForwards                    *int64                 `protobuf:"varint,143,opt,name=total_tcp_port_forwards,json=totalTcpPortForwards,proto3,oneof" json:"total_tcp_port_forwards,omitempty"`
	TotalUdpPortForwards                    *int64                 `protobuf:"varint,144,opt,name=total_udp_port_forwards,json=totalUdpPortForwards,proto3,oneof" json:"total_udp_port_forwards,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *ServerLoad) Reset() {
	*x = ServerLoad{}
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLoad) ProtoMessage() {}

func (x *ServerLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_server_load_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLoad.ProtoReflect.Descriptor instead.
func (*ServerLoad) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_server_load_proto_rawDescGZIP(), []int{2}
}

func (x *ServerLoad) GetCpuPercent() float64 {
	if x != nil && x.CpuPercent != nil {
		return *x.CpuPercent
	}
	return 0
}

func (x *ServerLoad) GetHeapAlloc() uint64 {
	if x != nil && x.HeapAlloc != nil {
		return *x.HeapAlloc
	}
	return 0
}

func (x *ServerLoad) GetHeapIdle() uint64 {
	if x != nil && x.HeapIdle != nil {
		return *x.HeapIdle
	}
	return 0
}

func (x *ServerLoad) GetHeapInuse() uint64 {
	if x != nil && x.HeapInuse != nil {
		return *x.HeapInuse
	}
	return 0
}

func (x *ServerLoad) GetHeapObjects() uint64 {
	if x != nil && x.HeapObjects != nil {
		return *x.HeapObjects
	}
	return 0
}

func (x *ServerLoad) GetHeapReleased() uint64 {
	if x != nil && x.HeapReleased != nil {
		return *x.HeapReleased
	}
	return 0
}

func (x *ServerLoad) GetHeapSys() uint64 {
	if x != nil && x.HeapSys != nil {
		return *x.HeapSys
	}
	return 0
}

func (x *ServerLoad) GetNetworkBytesReceived() int64 {
	if x != nil && x.NetworkBytesReceived != nil {
		return *x.NetworkBytesReceived
	}
	return 0
}

func (x *ServerLoad) GetNetworkBytesSent() int64 {
	if x != nil && x.NetworkBytesSent != nil {
		return *x.NetworkBytesSent
	}
	return 0
}

func (x *ServerLoad) GetEstablishTunnels() bool {
	if x != nil && x.EstablishTunnels != nil {
		return *x.EstablishTunnels
	}
	return false
}

func (x *ServerLoad) GetEstablishTunnelsLimitedCount() int64 {
	if x != nil && x.EstablishTunnelsLimitedCount != nil {
		return *x.EstablishTunnelsLimitedCount
	}
	return 0
}

func (x *ServerLoad) GetLastGc() *timestamppb.Timestamp {
	if x != nil {
		return x.LastGc
	}
	return nil
}

func (x *ServerLoad) GetNumForcedGc() uint32 {
	if x != nil && x.NumForcedGc != nil {
		return *x.NumForcedGc
	}
	return 0
}

func (x *ServerLoad) GetNumGc() uint32 {
	if x != nil && x.NumGc != nil {
		return *x.NumGc
	}
	return 0
}

func (x *ServerLoad) GetNumGoroutine() uint32 {
	if x != nil && x.NumGoroutine != nil {
		return *x.NumGoroutine
	}
	return 0
}

func (x *ServerLoad) GetReplayDeleteReplayCount() int64 {
	if x != nil && x.ReplayDeleteReplayCount != nil {
		return *x.ReplayDeleteReplayCount
	}
	return 0
}

func (x *ServerLoad) GetReplayFailedReplayCount() int64 {
	if x != nil && x.ReplayFailedReplayCount != nil {
		return *x.ReplayFailedReplayCount
	}
	return 0
}

func (x *ServerLoad) GetReplayGetReplayHitCount() int64 {
	if x != nil && x.ReplayGetReplayHitCount != nil {
		return *x.ReplayGetReplayHitCount
	}
	return 0
}

func (x *ServerLoad) GetReplayGetReplayMissCount() int64 {
	if x != nil && x.ReplayGetReplayMissCount != nil {
		return *x.ReplayGetReplayMissCount
	}
	return 0
}

func (x *ServerLoad) GetReplayMaxCacheEntries() int64 {
	if x != nil && x.ReplayMaxCacheEntries != nil {
		return *x.ReplayMaxCacheEntries
	}
	return 0
}

func (x *ServerLoad) GetReplaySetReplayCount() int64 {
	if x != nil && x.ReplaySetReplayCount != nil {
		return *x.ReplaySetReplayCount
	}
	return 0
}

func (x *ServerLoad) GetServerTacticsCacheHitCount() int64 {
	if x != nil && x.ServerTacticsCacheHitCount != nil {
		return *x.ServerTacticsCacheHitCount
	}
	return 0
}

func (x *ServerLoad) GetServerTacticsCacheMissCount() int64 {
	if x != nil && x.ServerTacticsCacheMissCount != nil {
		return *x.ServerTacticsCacheMissCount
	}
	return 0
}

func (x *ServerLoad) GetServerTacticsMaxCacheEntries() int64 {
	if x != nil && x.ServerTacticsMaxCacheEntries != nil {
		return *x.ServerTacticsMaxCacheEntries
	}
	return 0
}

func (x *ServerLoad) GetServerTacticsMaxParameterReferences() int64 {
	if x != nil && x.ServerTacticsMaxParameterReferences != nil {
		return *x.ServerTacticsMaxParameterReferences
	}
	return 0
}

func (x *ServerLoad) GetDialingTcpPortForwards() int64 {
	if x != nil && x.DialingTcpPortForwards != nil {
		return *x.DialingTcpPortForwards
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv4PortForwardDialedCount() int64 {
	if x != nil && x.TcpIpv4PortForwardDialedCount != nil {
		return *x.TcpIpv4PortForwardDialedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv4PortForwardDialedDuration() int64 {
	if x != nil && x.TcpIpv4PortForwardDialedDuration != nil {
		return *x.TcpIpv4PortForwardDialedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv4PortForwardFailedCount() int64 {
	if x != nil && x.TcpIpv4PortForwardFailedCount != nil {
		return *x.TcpIpv4PortForwardFailedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv4PortForwardFailedDuration() int64 {
	if x != nil && x.TcpIpv4PortForwardFailedDuration != nil {
		return *x.TcpIpv4PortForwardFailedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv6PortForwardDialedCount() int64 {
	if x != nil && x.TcpIpv6PortForwardDialedCount != nil {
		return *x.TcpIpv6PortForwardDialedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv6PortForwardDialedDuration() int64 {
	if x != nil && x.TcpIpv6PortForwardDialedDuration != nil {
		return *x.TcpIpv6PortForwardDialedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv6PortForwardFailedCount() int64 {
	if x != nil && x.TcpIpv6PortForwardFailedCount != nil {
		return *x.TcpIpv6PortForwardFailedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpIpv6PortForwardFailedDuration() int64 {
	if x != nil && x.TcpIpv6PortForwardFailedDuration != nil {
		return *x.TcpIpv6PortForwardFailedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardDialedCount() int64 {
	if x != nil && x.TcpPortForwardDialedCount != nil {
		return *x.TcpPortForwardDialedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardDialedDuration() int64 {
	if x != nil && x.TcpPortForwardDialedDuration != nil {
		return *x.TcpPortForwardDialedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardFailedCount() int64 {
	if x != nil && x.TcpPortForwardFailedCount != nil {
		return *x.TcpPortForwardFailedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardFailedDuration() int64 {
	if x != nil && x.TcpPortForwardFailedDuration != nil {
		return *x.TcpPortForwardFailedDuration
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardRejectedDialingLimitCount() int64 {
	if x != nil && x.TcpPortForwardRejectedDialingLimitCount != nil {
		return *x.TcpPortForwardRejectedDialingLimitCount
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwardRejectedDisallowedCount() int64 {
	if x != nil && x.TcpPortForwardRejectedDisallowedCount != nil {
		return *x.TcpPortForwardRejectedDisallowedCount
	}
	return 0
}

func (x *ServerLoad) GetTcpPortForwards() int64 {
	if x != nil && x.TcpPortForwards != nil {
		return *x.TcpPortForwards
	}
	return 0
}

func (x *ServerLoad) GetUdpPortForwardRejectedDisallowedCount() int64 {
	if x != nil && x.UdpPortForwardRejectedDisallowedCount != nil {
		return *x.UdpPortForwardRejectedDisallowedCount
	}
	return 0
}

func (x *ServerLoad) GetUdpPortForwards() int64 {
	if x != nil && x.UdpPortForwards != nil {
		return *x.UdpPortForwards
	}
	return 0
}

func (x *ServerLoad) GetTotalTcpPortForwards() int64 {
	if x != nil && x.TotalTcpPortForwards != nil {
		return *x.TotalTcpPortForwards
	}
	return 0
}

func (x *ServerLoad) GetTotalUdpPortForwards() int64 {
	if x != nil && x.TotalUdpPortForwards != nil {
		return *x.TotalUdpPortForwards
	}
	return 0
}

var File_ca_psiphon_psiphond_server_load_proto protoreflect.FileDescriptor

const file_ca_psiphon_psiphond_server_load_proto_rawDesc = "" +
	"\n" +
	"%ca.psiphon.psiphond/server_load.proto\x12\x13ca.psiphon.psiphond\x1a\x1fgoogle/protobuf/timestamp.proto\"\xfd\x01\n" +
	"\x12ServerLoadProtocol\x12\x1b\n" +
	"\x06region\x18d \x01(\tH\x00R\x06region\x88\x01\x01\x12\x1f\n" +
	"\bprotocol\x18e \x01(\tH\x01R\bprotocol\x88\x01\x01\x12.\n" +
	"\x10accepted_clients\x18f \x01(\x03H\x02R\x0facceptedClients\x88\x01\x01\x124\n" +
	"\x13established_clients\x18g \x01(\x03H\x03R\x12establishedClients\x88\x01\x01B\t\n" +
	"\a_regionB\v\n" +
	"\t_protocolB\x13\n" +
	"\x11_accepted_clientsB\x16\n" +
	"\x14_established_clients\"\xbc\x02\n" +
	"\rServerLoadDNS\x12\"\n" +
	"\n" +
	"dns_server\x18d \x01(\tH\x00R\tdnsServer\x88\x01\x01\x12 \n" +
	"\tdns_count\x18e \x01(\x03H\x01R\bdnsCount\x88\x01\x01\x12&\n" +
	"\fdns_duration\x18f \x01(\x03H\x02R\vdnsDuration\x88\x01\x01\x12-\n" +
	"\x10dns_failed_count\x18g \x01(\x03H\x03R\x0ednsFailedCount\x88\x01\x01\x123\n" +
	"\x13dns_failed_duration\x18h \x01(\x03H\x04R\x11dnsFailedDuration\x88\x01\x01B\r\n" +
	"\v_dns_serverB\f\n" +
	"\n" +
	"_dns_countB\x0f\n" +
	"\r_dns_durationB\x13\n" +
	"\x11_dns_failed_countB\x16\n" +
	"\x14_dns_failed_duration\"\xbc!\n" +
	"\n" +
	"ServerLoad\x12$\n" +
	"\vcpu_percent\x18d \x01(\x01H\x00R\n" +
	"cpuPercent\x88\x01\x01\x12\"\n" +
	"\n" +
	"heap_alloc\x18e \x01(\x04H\x01R\theapAlloc\x88\x01\x01\x12 \n" +
	"\theap_idle\x18f \x01(\x04H\x02R\bheapIdle\x88\x01\x01\x12\"\n" +
	"\n" +
	"heap_inuse\x18g \x01(\x04H\x03R\theapInuse\x88\x01\x01\x12&\n" +
	"\fheap_objects\x18h \x01(\x04H\x04R\vheapObjects\x88\x01\x01\x12(\n" +
	"\rheap_released\x18i \x01(\x04H\x05R\fheapReleased\x88\x01\x01\x12\x1e\n" +
	"\bheap_sys\x18j \x01(\x04H\x06R\aheapSys\x88\x01\x01\x129\n" +
	"\x16network_bytes_received\x18k \x01(\x03H\aR\x14networkBytesReceived\x88\x01\x01\x121\n" +
	"\x12network_bytes_sent\x18l \x01(\x03H\bR\x10networkBytesSent\x88\x01\x01\x120\n" +
	"\x11establish_tunnels\x18m \x01(\bH\tR\x10establishTunnels\x88\x01\x01\x12J\n" +
	"\x1festablish_tunnels_limited_count\x18n \x01(\x03H\n" +
	"R\x1cestablishTunnelsLimitedCount\x88\x01\x01\x128\n" +
	"\alast_gc\x18o \x01(\v2\x1a.google.protobuf.TimestampH\vR\x06lastGc\x88\x01\x01\x12'\n" +
	"\rnum_forced_gc\x18p \x01(\rH\fR\vnumForcedGc\x88\x01\x01\x12\x1a\n" +
	"\x06num_gc\x18q \x01(\rH\rR\x05numGc\x88\x01\x01\x12(\n" +
	"\rnum_goroutine\x18r \x01(\rH\x0eR\fnumGoroutine\x88\x01\x01\x12@\n" +
	"\x1areplay_delete_replay_count\x18s \x01(\x03H\x0fR\x17replayDeleteReplayCount\x88\x01\x01\x12@\n" +
	"\x1areplay_failed_replay_count\x18t \x01(\x03H\x10R\x17replayFailedReplayCount\x88\x01\x01\x12A\n" +
	"\x1breplay_get_replay_hit_count\x18u \x01(\x03H\x11R\x17replayGetReplayHitCount\x88\x01\x01\x12C\n" +
	"\x1creplay_get_replay_miss_count\x18v \x01(\x03H\x12R\x18replayGetReplayMissCount\x88\x01\x01\x12<\n" +
	"\x18replay_max_cache_entries\x18w \x01(\x03H\x13R\x15replayMaxCacheEntries\x88\x01\x01\x12:\n" +
	"\x17replay_set_replay_count\x18x \x01(\x03H\x14R\x14replaySetReplayCount\x88\x01\x01\x12G\n" +
	"\x1eserver_tactics_cache_hit_count\x18y \x01(\x03H\x15R\x1aserverTacticsCacheHitCount\x88\x01\x01\x12I\n" +
	"\x1fserver_tactics_cache_miss_count\x18z \x01(\x03H\x16R\x1bserverTacticsCacheMissCount\x88\x01\x01\x12K\n" +
	" server_tactics_max_cache_entries\x18{ \x01(\x03H\x17R\x1cserverTacticsMaxCacheEntries\x88\x01\x01\x12Y\n" +
	"'server_tactics_max_parameter_references\x18| \x01(\x03H\x18R#serverTacticsMaxParameterReferences\x88\x01\x01\x12>\n" +
	"\x19dialing_tcp_port_forwards\x18} \x01(\x03H\x19R\x16dialingTcpPortForwards\x88\x01\x01\x12N\n" +
	"\"tcp_ipv4_port_forward_dialed_count\x18~ \x01(\x03H\x1aR\x1dtcpIpv4PortForwardDialedCount\x88\x01\x01\x12T\n" +
	"%tcp_ipv4_port_forward_dialed_duration\x18\x7f \x01(\x03H\x1bR tcpIpv4PortForwardDialedDuration\x88\x01\x01\x12O\n" +
	"\"tcp_ipv4_port_forward_failed_count\x18\x80\x01 \x01(\x03H\x1cR\x1dtcpIpv4PortForwardFailedCount\x88\x01\x01\x12U\n" +
	"%tcp_ipv4_port_forward_failed_duration\x18\x81\x01 \x01(\x03H\x1dR tcpIpv4PortForwardFailedDuration\x88\x01\x01\x12O\n" +
	"\"tcp_ipv6_port_forward_dialed_count\x18\x82\x01 \x01(\x03H\x1eR\x1dtcpIpv6PortForwardDialedCount\x88\x01\x01\x12U\n" +
	"%tcp_ipv6_port_forward_dialed_duration\x18\x83\x01 \x01(\x03H\x1fR tcpIpv6PortForwardDialedDuration\x88\x01\x01\x12O\n" +
	"\"tcp_ipv6_port_forward_failed_count\x18\x84\x01 \x01(\x03H R\x1dtcpIpv6PortForwardFailedCount\x88\x01\x01\x12U\n" +
	"%tcp_ipv6_port_forward_failed_duration\x18\x85\x01 \x01(\x03H!R tcpIpv6PortForwardFailedDuration\x88\x01\x01\x12F\n" +
	"\x1dtcp_port_forward_dialed_count\x18\x86\x01 \x01(\x03H\"R\x19tcpPortForwardDialedCount\x88\x01\x01\x12L\n" +
	" tcp_port_forward_dialed_duration\x18\x87\x01 \x01(\x03H#R\x1ctcpPortForwardDialedDuration\x88\x01\x01\x12F\n" +
	"\x1dtcp_port_forward_failed_count\x18\x88\x01 \x01(\x03H$R\x19tcpPortForwardFailedCount\x88\x01\x01\x12L\n" +
	" tcp_port_forward_failed_duration\x18\x89\x01 \x01(\x03H%R\x1ctcpPortForwardFailedDuration\x88\x01\x01\x12d\n" +
	"-tcp_port_forward_rejected_dialing_limit_count\x18\x8a\x01 \x01(\x03H&R'tcpPortForwardRejectedDialingLimitCount\x88\x01\x01\x12_\n" +
	"*tcp_port_forward_rejected_disallowed_count\x18\x8b\x01 \x01(\x03H'R%tcpPortForwardRejectedDisallowedCount\x88\x01\x01\x120\n" +
	"\x11tcp_port_forwards\x18\x8c\x01 \x01(\x03H(R\x0ftcpPortForwards\x88\x01\x01\x12_\n" +
	"*udp_port_forward_rejected_disallowed_count\x18\x8d\x01 \x01(\x03H)R%udpPortForwardRejectedDisallowedCount\x88\x01\x01\x120\n" +
	"\x11udp_port_forwards\x18\x8e\x01 \x01(\x03H*R\x0fudpPortForwards\x88\x01\x01\x12;\n" +
	"\x17total_tcp_port_forwards\x18\x8f\x01 \x01(\x03H+R\x14totalTcpPortForwards\x88\x01\x01\x12;\n" +
	"\x17total_udp_port_forwards\x18\x90\x01 \x01(\x03H,R\x14totalUdpPortForwards\x88\x01\x01B\x0e\n" +
	"\f_cpu_percentB\r\n" +
	"\v_heap_allocB\f\n" +
	"\n" +
	"_heap_idleB\r\n" +
	"\v_heap_inuseB\x0f\n" +
	"\r_heap_objectsB\x10\n" +
	"\x0e_heap_releasedB\v\n" +
	"\t_heap_sysB\x19\n" +
	"\x17_network_bytes_receivedB\x15\n" +
	"\x13_network_bytes_sentB\x14\n" +
	"\x12_establish_tunnelsB\"\n" +
	" _establish_tunnels_limited_countB\n" +
	"\n" +
	"\b_last_gcB\x10\n" +
	"\x0e_num_forced_gcB\t\n" +
	"\a_num_gcB\x10\n" +
	"\x0e_num_goroutineB\x1d\n" +
	"\x1b_replay_delete_replay_countB\x1d\n" +
	"\x1b_replay_failed_replay_countB\x1e\n" +
	"\x1c_replay_get_replay_hit_countB\x1f\n" +
	"\x1d_replay_get_replay_miss_countB\x1b\n" +
	"\x19_replay_max_cache_entriesB\x1a\n" +
	"\x18_replay_set_replay_countB!\n" +
	"\x1f_server_tactics_cache_hit_countB\"\n" +
	" _server_tactics_cache_miss_countB#\n" +
	"!_server_tactics_max_cache_entriesB*\n" +
	"(_server_tactics_max_parameter_referencesB\x1c\n" +
	"\x1a_dialing_tcp_port_forwardsB%\n" +
	"#_tcp_ipv4_port_forward_dialed_countB(\n" +
	"&_tcp_ipv4_port_forward_dialed_durationB%\n" +
	"#_tcp_ipv4_port_forward_failed_countB(\n" +
	"&_tcp_ipv4_port_forward_failed_durationB%\n" +
	"#_tcp_ipv6_port_forward_dialed_countB(\n" +
	"&_tcp_ipv6_port_forward_dialed_durationB%\n" +
	"#_tcp_ipv6_port_forward_failed_countB(\n" +
	"&_tcp_ipv6_port_forward_failed_durationB \n" +
	"\x1e_tcp_port_forward_dialed_countB#\n" +
	"!_tcp_port_forward_dialed_durationB \n" +
	"\x1e_tcp_port_forward_failed_countB#\n" +
	"!_tcp_port_forward_failed_durationB0\n" +
	"._tcp_port_forward_rejected_dialing_limit_countB-\n" +
	"+_tcp_port_forward_rejected_disallowed_countB\x14\n" +
	"\x12_tcp_port_forwardsB-\n" +
	"+_udp_port_forward_rejected_disallowed_countB\x14\n" +
	"\x12_udp_port_forwardsB\x1a\n" +
	"\x18_total_tcp_port_forwardsB\x1a\n" +
	"\x18_total_udp_port_forwardsBHZFgithub.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pb/psiphondb\x06proto3"

var (
	file_ca_psiphon_psiphond_server_load_proto_rawDescOnce sync.Once
	file_ca_psiphon_psiphond_server_load_proto_rawDescData []byte
)

func file_ca_psiphon_psiphond_server_load_proto_rawDescGZIP() []byte {
	file_ca_psiphon_psiphond_server_load_proto_rawDescOnce.Do(func() {
		file_ca_psiphon_psiphond_server_load_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_server_load_proto_rawDesc), len(file_ca_psiphon_psiphond_server_load_proto_rawDesc)))
	})
	return file_ca_psiphon_psiphond_server_load_proto_rawDescData
}

var file_ca_psiphon_psiphond_server_load_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ca_psiphon_psiphond_server_load_proto_goTypes = []any{
	(*ServerLoadProtocol)(nil),    // 0: ca.psiphon.psiphond.ServerLoadProtocol
	(*ServerLoadDNS)(nil),         // 1: ca.psiphon.psiphond.ServerLoadDNS
	(*ServerLoad)(nil),            // 2: ca.psiphon.psiphond.ServerLoad
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_ca_psiphon_psiphond_server_load_proto_depIdxs = []int32{
	3, // 0: ca.psiphon.psiphond.ServerLoad.last_gc:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ca_psiphon_psiphond_server_load_proto_init() }
func file_ca_psiphon_psiphond_server_load_proto_init() {
	if File_ca_psiphon_psiphond_server_load_proto != nil {
		return
	}
	file_ca_psiphon_psiphond_server_load_proto_msgTypes[0].OneofWrappers = []any{}
	file_ca_psiphon_psiphond_server_load_proto_msgTypes[1].OneofWrappers = []any{}
	file_ca_psiphon_psiphond_server_load_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_server_load_proto_rawDesc), len(file_ca_psiphon_psiphond_server_load_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ca_psiphon_psiphond_server_load_proto_goTypes,
		DependencyIndexes: file_ca_psiphon_psiphond_server_load_proto_depIdxs,
		MessageInfos:      file_ca_psiphon_psiphond_server_load_proto_msgTypes,
	}.Build()
	File_ca_psiphon_psiphond_server_load_proto = out.File
	file_ca_psiphon_psiphond_server_load_proto_goTypes = nil
	file_ca_psiphon_psiphond_server_load_proto_depIdxs = nil
}
