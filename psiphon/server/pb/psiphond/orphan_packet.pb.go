// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: ca.psiphon.psiphond/orphan_packet.proto

package psiphond

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrphanPacket struct {
	state                                                protoimpl.MessageState `protogen:"open.v1"`
	DownstreamPacketRejectedDisallowedDomain             *int64                 `protobuf:"varint,100,opt,name=downstream_packet_rejected_disallowed_domain,json=downstreamPacketRejectedDisallowedDomain,proto3,oneof" json:"downstream_packet_rejected_disallowed_domain,omitempty"`
	DownstreamPacketRejectedDisallowedTcpDestinationPort *int64                 `protobuf:"varint,101,opt,name=downstream_packet_rejected_disallowed_tcp_destination_port,json=downstreamPacketRejectedDisallowedTcpDestinationPort,proto3,oneof" json:"downstream_packet_rejected_disallowed_tcp_destination_port,omitempty"`
	DownstreamPacketRejectedDisallowedUdpDestinationPort *int64                 `protobuf:"varint,102,opt,name=downstream_packet_rejected_disallowed_udp_destination_port,json=downstreamPacketRejectedDisallowedUdpDestinationPort,proto3,oneof" json:"downstream_packet_rejected_disallowed_udp_destination_port,omitempty"`
	DownstreamPacketRejectedInvalidDestinationAddress    *int64                 `protobuf:"varint,103,opt,name=downstream_packet_rejected_invalid_destination_address,json=downstreamPacketRejectedInvalidDestinationAddress,proto3,oneof" json:"downstream_packet_rejected_invalid_destination_address,omitempty"`
	DownstreamPacketRejectedInvalidDnsMessage            *int64                 `protobuf:"varint,104,opt,name=downstream_packet_rejected_invalid_dns_message,json=downstreamPacketRejectedInvalidDnsMessage,proto3,oneof" json:"downstream_packet_rejected_invalid_dns_message,omitempty"`
	DownstreamPacketRejectedInvalidIpHeaderOptions       *int64                 `protobuf:"varint,105,opt,name=downstream_packet_rejected_invalid_ip_header_options,json=downstreamPacketRejectedInvalidIpHeaderOptions,proto3,oneof" json:"downstream_packet_rejected_invalid_ip_header_options,omitempty"`
	DownstreamPacketRejectedInvalidIpHeaderProtocol      *int64                 `protobuf:"varint,106,opt,name=downstream_packet_rejected_invalid_ip_header_protocol,json=downstreamPacketRejectedInvalidIpHeaderProtocol,proto3,oneof" json:"downstream_packet_rejected_invalid_ip_header_protocol,omitempty"`
	DownstreamPacketRejectedInvalidIpHeaderVersion       *int64                 `protobuf:"varint,107,opt,name=downstream_packet_rejected_invalid_ip_header_version,json=downstreamPacketRejectedInvalidIpHeaderVersion,proto3,oneof" json:"downstream_packet_rejected_invalid_ip_header_version,omitempty"`
	DownstreamPacketRejectedInvalidIpPacketLength        *int64                 `protobuf:"varint,108,opt,name=downstream_packet_rejected_invalid_ip_packet_length,json=downstreamPacketRejectedInvalidIpPacketLength,proto3,oneof" json:"downstream_packet_rejected_invalid_ip_packet_length,omitempty"`
	DownstreamPacketRejectedInvalidTcpPacketLength       *int64                 `protobuf:"varint,109,opt,name=downstream_packet_rejected_invalid_tcp_packet_length,json=downstreamPacketRejectedInvalidTcpPacketLength,proto3,oneof" json:"downstream_packet_rejected_invalid_tcp_packet_length,omitempty"`
	DownstreamPacketRejectedNoClient                     *int64                 `protobuf:"varint,110,opt,name=downstream_packet_rejected_no_client,json=downstreamPacketRejectedNoClient,proto3,oneof" json:"downstream_packet_rejected_no_client,omitempty"`
	DownstreamPacketRejectedNoDnsResolvers               *int64                 `protobuf:"varint,111,opt,name=downstream_packet_rejected_no_dns_resolvers,json=downstreamPacketRejectedNoDnsResolvers,proto3,oneof" json:"downstream_packet_rejected_no_dns_resolvers,omitempty"`
	DownstreamPacketRejectedNoOriginalAddress            *int64                 `protobuf:"varint,112,opt,name=downstream_packet_rejected_no_original_address,json=downstreamPacketRejectedNoOriginalAddress,proto3,oneof" json:"downstream_packet_rejected_no_original_address,omitempty"`
	DownstreamPacketRejectedNoSession                    *int64                 `protobuf:"varint,113,opt,name=downstream_packet_rejected_no_session,json=downstreamPacketRejectedNoSession,proto3,oneof" json:"downstream_packet_rejected_no_session,omitempty"`
	UpstreamPacketRejectedDisallowedDomain               *int64                 `protobuf:"varint,114,opt,name=upstream_packet_rejected_disallowed_domain,json=upstreamPacketRejectedDisallowedDomain,proto3,oneof" json:"upstream_packet_rejected_disallowed_domain,omitempty"`
	UpstreamPacketRejectedDisallowedTcpDestinationPort   *int64                 `protobuf:"varint,115,opt,name=upstream_packet_rejected_disallowed_tcp_destination_port,json=upstreamPacketRejectedDisallowedTcpDestinationPort,proto3,oneof" json:"upstream_packet_rejected_disallowed_tcp_destination_port,omitempty"`
	UpstreamPacketRejectedDisallowedUdpDestinationPort   *int64                 `protobuf:"varint,116,opt,name=upstream_packet_rejected_disallowed_udp_destination_port,json=upstreamPacketRejectedDisallowedUdpDestinationPort,proto3,oneof" json:"upstream_packet_rejected_disallowed_udp_destination_port,omitempty"`
	UpstreamPacketRejectedInvalidDestinationAddress      *int64                 `protobuf:"varint,117,opt,name=upstream_packet_rejected_invalid_destination_address,json=upstreamPacketRejectedInvalidDestinationAddress,proto3,oneof" json:"upstream_packet_rejected_invalid_destination_address,omitempty"`
	UpstreamPacketRejectedInvalidDnsMessage              *int64                 `protobuf:"varint,118,opt,name=upstream_packet_rejected_invalid_dns_message,json=upstreamPacketRejectedInvalidDnsMessage,proto3,oneof" json:"upstream_packet_rejected_invalid_dns_message,omitempty"`
	UpstreamPacketRejectedInvalidIpHeaderOptions         *int64                 `protobuf:"varint,119,opt,name=upstream_packet_rejected_invalid_ip_header_options,json=upstreamPacketRejectedInvalidIpHeaderOptions,proto3,oneof" json:"upstream_packet_rejected_invalid_ip_header_options,omitempty"`
	UpstreamPacketRejectedInvalidIpHeaderProtocol        *int64                 `protobuf:"varint,120,opt,name=upstream_packet_rejected_invalid_ip_header_protocol,json=upstreamPacketRejectedInvalidIpHeaderProtocol,proto3,oneof" json:"upstream_packet_rejected_invalid_ip_header_protocol,omitempty"`
	UpstreamPacketRejectedInvalidIpHeaderVersion         *int64                 `protobuf:"varint,121,opt,name=upstream_packet_rejected_invalid_ip_header_version,json=upstreamPacketRejectedInvalidIpHeaderVersion,proto3,oneof" json:"upstream_packet_rejected_invalid_ip_header_version,omitempty"`
	UpstreamPacketRejectedInvalidIpPacketLength          *int64                 `protobuf:"varint,122,opt,name=upstream_packet_rejected_invalid_ip_packet_length,json=upstreamPacketRejectedInvalidIpPacketLength,proto3,oneof" json:"upstream_packet_rejected_invalid_ip_packet_length,omitempty"`
	UpstreamPacketRejectedInvalidTcpPacketLength         *int64                 `protobuf:"varint,123,opt,name=upstream_packet_rejected_invalid_tcp_packet_length,json=upstreamPacketRejectedInvalidTcpPacketLength,proto3,oneof" json:"upstream_packet_rejected_invalid_tcp_packet_length,omitempty"`
	UpstreamPacketRejectedNoClient                       *int64                 `protobuf:"varint,124,opt,name=upstream_packet_rejected_no_client,json=upstreamPacketRejectedNoClient,proto3,oneof" json:"upstream_packet_rejected_no_client,omitempty"`
	UpstreamPacketRejectedNoDnsResolvers                 *int64                 `protobuf:"varint,125,opt,name=upstream_packet_rejected_no_dns_resolvers,json=upstreamPacketRejectedNoDnsResolvers,proto3,oneof" json:"upstream_packet_rejected_no_dns_resolvers,omitempty"`
	UpstreamPacketRejectedNoOriginalAddress              *int64                 `protobuf:"varint,126,opt,name=upstream_packet_rejected_no_original_address,json=upstreamPacketRejectedNoOriginalAddress,proto3,oneof" json:"upstream_packet_rejected_no_original_address,omitempty"`
	UpstreamPacketRejectedNoSession                      *int64                 `protobuf:"varint,127,opt,name=upstream_packet_rejected_no_session,json=upstreamPacketRejectedNoSession,proto3,oneof" json:"upstream_packet_rejected_no_session,omitempty"`
	unknownFields                                        protoimpl.UnknownFields
	sizeCache                                            protoimpl.SizeCache
}

func (x *OrphanPacket) Reset() {
	*x = OrphanPacket{}
	mi := &file_ca_psiphon_psiphond_orphan_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrphanPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrphanPacket) ProtoMessage() {}

func (x *OrphanPacket) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_orphan_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrphanPacket.ProtoReflect.Descriptor instead.
func (*OrphanPacket) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_orphan_packet_proto_rawDescGZIP(), []int{0}
}

func (x *OrphanPacket) GetDownstreamPacketRejectedDisallowedDomain() int64 {
	if x != nil && x.DownstreamPacketRejectedDisallowedDomain != nil {
		return *x.DownstreamPacketRejectedDisallowedDomain
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedDisallowedTcpDestinationPort() int64 {
	if x != nil && x.DownstreamPacketRejectedDisallowedTcpDestinationPort != nil {
		return *x.DownstreamPacketRejectedDisallowedTcpDestinationPort
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedDisallowedUdpDestinationPort() int64 {
	if x != nil && x.DownstreamPacketRejectedDisallowedUdpDestinationPort != nil {
		return *x.DownstreamPacketRejectedDisallowedUdpDestinationPort
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidDestinationAddress() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidDestinationAddress != nil {
		return *x.DownstreamPacketRejectedInvalidDestinationAddress
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidDnsMessage() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidDnsMessage != nil {
		return *x.DownstreamPacketRejectedInvalidDnsMessage
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidIpHeaderOptions() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidIpHeaderOptions != nil {
		return *x.DownstreamPacketRejectedInvalidIpHeaderOptions
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidIpHeaderProtocol() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidIpHeaderProtocol != nil {
		return *x.DownstreamPacketRejectedInvalidIpHeaderProtocol
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidIpHeaderVersion() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidIpHeaderVersion != nil {
		return *x.DownstreamPacketRejectedInvalidIpHeaderVersion
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidIpPacketLength() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidIpPacketLength != nil {
		return *x.DownstreamPacketRejectedInvalidIpPacketLength
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedInvalidTcpPacketLength() int64 {
	if x != nil && x.DownstreamPacketRejectedInvalidTcpPacketLength != nil {
		return *x.DownstreamPacketRejectedInvalidTcpPacketLength
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedNoClient() int64 {
	if x != nil && x.DownstreamPacketRejectedNoClient != nil {
		return *x.DownstreamPacketRejectedNoClient
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedNoDnsResolvers() int64 {
	if x != nil && x.DownstreamPacketRejectedNoDnsResolvers != nil {
		return *x.DownstreamPacketRejectedNoDnsResolvers
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedNoOriginalAddress() int64 {
	if x != nil && x.DownstreamPacketRejectedNoOriginalAddress != nil {
		return *x.DownstreamPacketRejectedNoOriginalAddress
	}
	return 0
}

func (x *OrphanPacket) GetDownstreamPacketRejectedNoSession() int64 {
	if x != nil && x.DownstreamPacketRejectedNoSession != nil {
		return *x.DownstreamPacketRejectedNoSession
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedDisallowedDomain() int64 {
	if x != nil && x.UpstreamPacketRejectedDisallowedDomain != nil {
		return *x.UpstreamPacketRejectedDisallowedDomain
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedDisallowedTcpDestinationPort() int64 {
	if x != nil && x.UpstreamPacketRejectedDisallowedTcpDestinationPort != nil {
		return *x.UpstreamPacketRejectedDisallowedTcpDestinationPort
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedDisallowedUdpDestinationPort() int64 {
	if x != nil && x.UpstreamPacketRejectedDisallowedUdpDestinationPort != nil {
		return *x.UpstreamPacketRejectedDisallowedUdpDestinationPort
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidDestinationAddress() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidDestinationAddress != nil {
		return *x.UpstreamPacketRejectedInvalidDestinationAddress
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidDnsMessage() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidDnsMessage != nil {
		return *x.UpstreamPacketRejectedInvalidDnsMessage
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidIpHeaderOptions() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidIpHeaderOptions != nil {
		return *x.UpstreamPacketRejectedInvalidIpHeaderOptions
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidIpHeaderProtocol() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidIpHeaderProtocol != nil {
		return *x.UpstreamPacketRejectedInvalidIpHeaderProtocol
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidIpHeaderVersion() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidIpHeaderVersion != nil {
		return *x.UpstreamPacketRejectedInvalidIpHeaderVersion
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidIpPacketLength() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidIpPacketLength != nil {
		return *x.UpstreamPacketRejectedInvalidIpPacketLength
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedInvalidTcpPacketLength() int64 {
	if x != nil && x.UpstreamPacketRejectedInvalidTcpPacketLength != nil {
		return *x.UpstreamPacketRejectedInvalidTcpPacketLength
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedNoClient() int64 {
	if x != nil && x.UpstreamPacketRejectedNoClient != nil {
		return *x.UpstreamPacketRejectedNoClient
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedNoDnsResolvers() int64 {
	if x != nil && x.UpstreamPacketRejectedNoDnsResolvers != nil {
		return *x.UpstreamPacketRejectedNoDnsResolvers
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedNoOriginalAddress() int64 {
	if x != nil && x.UpstreamPacketRejectedNoOriginalAddress != nil {
		return *x.UpstreamPacketRejectedNoOriginalAddress
	}
	return 0
}

func (x *OrphanPacket) GetUpstreamPacketRejectedNoSession() int64 {
	if x != nil && x.UpstreamPacketRejectedNoSession != nil {
		return *x.UpstreamPacketRejectedNoSession
	}
	return 0
}

var File_ca_psiphon_psiphond_orphan_packet_proto protoreflect.FileDescriptor

const file_ca_psiphon_psiphond_orphan_packet_proto_rawDesc = "" +
	"\n" +
	"'ca.psiphon.psiphond/orphan_packet.proto\x12\x13ca.psiphon.psiphond\"\x8a#\n" +
	"\fOrphanPacket\x12c\n" +
	",downstream_packet_rejected_disallowed_domain\x18d \x01(\x03H\x00R(downstreamPacketRejectedDisallowedDomain\x88\x01\x01\x12}\n" +
	":downstream_packet_rejected_disallowed_tcp_destination_port\x18e \x01(\x03H\x01R4downstreamPacketRejectedDisallowedTcpDestinationPort\x88\x01\x01\x12}\n" +
	":downstream_packet_rejected_disallowed_udp_destination_port\x18f \x01(\x03H\x02R4downstreamPacketRejectedDisallowedUdpDestinationPort\x88\x01\x01\x12v\n" +
	"6downstream_packet_rejected_invalid_destination_address\x18g \x01(\x03H\x03R1downstreamPacketRejectedInvalidDestinationAddress\x88\x01\x01\x12f\n" +
	".downstream_packet_rejected_invalid_dns_message\x18h \x01(\x03H\x04R)downstreamPacketRejectedInvalidDnsMessage\x88\x01\x01\x12q\n" +
	"4downstream_packet_rejected_invalid_ip_header_options\x18i \x01(\x03H\x05R.downstreamPacketRejectedInvalidIpHeaderOptions\x88\x01\x01\x12s\n" +
	"5downstream_packet_rejected_invalid_ip_header_protocol\x18j \x01(\x03H\x06R/downstreamPacketRejectedInvalidIpHeaderProtocol\x88\x01\x01\x12q\n" +
	"4downstream_packet_rejected_invalid_ip_header_version\x18k \x01(\x03H\aR.downstreamPacketRejectedInvalidIpHeaderVersion\x88\x01\x01\x12o\n" +
	"3downstream_packet_rejected_invalid_ip_packet_length\x18l \x01(\x03H\bR-downstreamPacketRejectedInvalidIpPacketLength\x88\x01\x01\x12q\n" +
	"4downstream_packet_rejected_invalid_tcp_packet_length\x18m \x01(\x03H\tR.downstreamPacketRejectedInvalidTcpPacketLength\x88\x01\x01\x12S\n" +
	"$downstream_packet_rejected_no_client\x18n \x01(\x03H\n" +
	"R downstreamPacketRejectedNoClient\x88\x01\x01\x12`\n" +
	"+downstream_packet_rejected_no_dns_resolvers\x18o \x01(\x03H\vR&downstreamPacketRejectedNoDnsResolvers\x88\x01\x01\x12f\n" +
	".downstream_packet_rejected_no_original_address\x18p \x01(\x03H\fR)downstreamPacketRejectedNoOriginalAddress\x88\x01\x01\x12U\n" +
	"%downstream_packet_rejected_no_session\x18q \x01(\x03H\rR!downstreamPacketRejectedNoSession\x88\x01\x01\x12_\n" +
	"*upstream_packet_rejected_disallowed_domain\x18r \x01(\x03H\x0eR&upstreamPacketRejectedDisallowedDomain\x88\x01\x01\x12y\n" +
	"8upstream_packet_rejected_disallowed_tcp_destination_port\x18s \x01(\x03H\x0fR2upstreamPacketRejectedDisallowedTcpDestinationPort\x88\x01\x01\x12y\n" +
	"8upstream_packet_rejected_disallowed_udp_destination_port\x18t \x01(\x03H\x10R2upstreamPacketRejectedDisallowedUdpDestinationPort\x88\x01\x01\x12r\n" +
	"4upstream_packet_rejected_invalid_destination_address\x18u \x01(\x03H\x11R/upstreamPacketRejectedInvalidDestinationAddress\x88\x01\x01\x12b\n" +
	",upstream_packet_rejected_invalid_dns_message\x18v \x01(\x03H\x12R'upstreamPacketRejectedInvalidDnsMessage\x88\x01\x01\x12m\n" +
	"2upstream_packet_rejected_invalid_ip_header_options\x18w \x01(\x03H\x13R,upstreamPacketRejectedInvalidIpHeaderOptions\x88\x01\x01\x12o\n" +
	"3upstream_packet_rejected_invalid_ip_header_protocol\x18x \x01(\x03H\x14R-upstreamPacketRejectedInvalidIpHeaderProtocol\x88\x01\x01\x12m\n" +
	"2upstream_packet_rejected_invalid_ip_header_version\x18y \x01(\x03H\x15R,upstreamPacketRejectedInvalidIpHeaderVersion\x88\x01\x01\x12k\n" +
	"1upstream_packet_rejected_invalid_ip_packet_length\x18z \x01(\x03H\x16R+upstreamPacketRejectedInvalidIpPacketLength\x88\x01\x01\x12m\n" +
	"2upstream_packet_rejected_invalid_tcp_packet_length\x18{ \x01(\x03H\x17R,upstreamPacketRejectedInvalidTcpPacketLength\x88\x01\x01\x12O\n" +
	"\"upstream_packet_rejected_no_client\x18| \x01(\x03H\x18R\x1eupstreamPacketRejectedNoClient\x88\x01\x01\x12\\\n" +
	")upstream_packet_rejected_no_dns_resolvers\x18} \x01(\x03H\x19R$upstreamPacketRejectedNoDnsResolvers\x88\x01\x01\x12b\n" +
	",upstream_packet_rejected_no_original_address\x18~ \x01(\x03H\x1aR'upstreamPacketRejectedNoOriginalAddress\x88\x01\x01\x12Q\n" +
	"#upstream_packet_rejected_no_session\x18\x7f \x01(\x03H\x1bR\x1fupstreamPacketRejectedNoSession\x88\x01\x01B/\n" +
	"-_downstream_packet_rejected_disallowed_domainB=\n" +
	";_downstream_packet_rejected_disallowed_tcp_destination_portB=\n" +
	";_downstream_packet_rejected_disallowed_udp_destination_portB9\n" +
	"7_downstream_packet_rejected_invalid_destination_addressB1\n" +
	"/_downstream_packet_rejected_invalid_dns_messageB7\n" +
	"5_downstream_packet_rejected_invalid_ip_header_optionsB8\n" +
	"6_downstream_packet_rejected_invalid_ip_header_protocolB7\n" +
	"5_downstream_packet_rejected_invalid_ip_header_versionB6\n" +
	"4_downstream_packet_rejected_invalid_ip_packet_lengthB7\n" +
	"5_downstream_packet_rejected_invalid_tcp_packet_lengthB'\n" +
	"%_downstream_packet_rejected_no_clientB.\n" +
	",_downstream_packet_rejected_no_dns_resolversB1\n" +
	"/_downstream_packet_rejected_no_original_addressB(\n" +
	"&_downstream_packet_rejected_no_sessionB-\n" +
	"+_upstream_packet_rejected_disallowed_domainB;\n" +
	"9_upstream_packet_rejected_disallowed_tcp_destination_portB;\n" +
	"9_upstream_packet_rejected_disallowed_udp_destination_portB7\n" +
	"5_upstream_packet_rejected_invalid_destination_addressB/\n" +
	"-_upstream_packet_rejected_invalid_dns_messageB5\n" +
	"3_upstream_packet_rejected_invalid_ip_header_optionsB6\n" +
	"4_upstream_packet_rejected_invalid_ip_header_protocolB5\n" +
	"3_upstream_packet_rejected_invalid_ip_header_versionB4\n" +
	"2_upstream_packet_rejected_invalid_ip_packet_lengthB5\n" +
	"3_upstream_packet_rejected_invalid_tcp_packet_lengthB%\n" +
	"#_upstream_packet_rejected_no_clientB,\n" +
	"*_upstream_packet_rejected_no_dns_resolversB/\n" +
	"-_upstream_packet_rejected_no_original_addressB&\n" +
	"$_upstream_packet_rejected_no_sessionBHZFgithub.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pb/psiphondb\x06proto3"

var (
	file_ca_psiphon_psiphond_orphan_packet_proto_rawDescOnce sync.Once
	file_ca_psiphon_psiphond_orphan_packet_proto_rawDescData []byte
)

func file_ca_psiphon_psiphond_orphan_packet_proto_rawDescGZIP() []byte {
	file_ca_psiphon_psiphond_orphan_packet_proto_rawDescOnce.Do(func() {
		file_ca_psiphon_psiphond_orphan_packet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_orphan_packet_proto_rawDesc), len(file_ca_psiphon_psiphond_orphan_packet_proto_rawDesc)))
	})
	return file_ca_psiphon_psiphond_orphan_packet_proto_rawDescData
}

var file_ca_psiphon_psiphond_orphan_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ca_psiphon_psiphond_orphan_packet_proto_goTypes = []any{
	(*OrphanPacket)(nil), // 0: ca.psiphon.psiphond.OrphanPacket
}
var file_ca_psiphon_psiphond_orphan_packet_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ca_psiphon_psiphond_orphan_packet_proto_init() }
func file_ca_psiphon_psiphond_orphan_packet_proto_init() {
	if File_ca_psiphon_psiphond_orphan_packet_proto != nil {
		return
	}
	file_ca_psiphon_psiphond_orphan_packet_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_orphan_packet_proto_rawDesc), len(file_ca_psiphon_psiphond_orphan_packet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ca_psiphon_psiphond_orphan_packet_proto_goTypes,
		DependencyIndexes: file_ca_psiphon_psiphond_orphan_packet_proto_depIdxs,
		MessageInfos:      file_ca_psiphon_psiphond_orphan_packet_proto_msgTypes,
	}.Build()
	File_ca_psiphon_psiphond_orphan_packet_proto = out.File
	file_ca_psiphon_psiphond_orphan_packet_proto_goTypes = nil
	file_ca_psiphon_psiphond_orphan_packet_proto_depIdxs = nil
}
