// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: ca.psiphon.psiphond/psiphond.proto

package psiphond

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Psiphond struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	HostId       *string                `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3,oneof" json:"host_id,omitempty"`
	HostType     *string                `protobuf:"bytes,3,opt,name=host_type,json=hostType,proto3,oneof" json:"host_type,omitempty"`
	HostBuildRev *string                `protobuf:"bytes,4,opt,name=host_build_rev,json=hostBuildRev,proto3,oneof" json:"host_build_rev,omitempty"`
	Provider     *string                `protobuf:"bytes,5,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// Types that are valid to be assigned to Metric:
	//
	//	*Psiphond_DomainBytes
	//	*Psiphond_FailedTunnel
	//	*Psiphond_InproxyBroker
	//	*Psiphond_IrregularTunnel
	//	*Psiphond_OrphanPacket
	//	*Psiphond_RemoteServerList
	//	*Psiphond_ServerBlocklist
	//	*Psiphond_ServerLoad
	//	*Psiphond_ServerLoadDns
	//	*Psiphond_ServerLoadProtocol
	//	*Psiphond_ServerPanic
	//	*Psiphond_ServerPacket
	//	*Psiphond_ServerTunnel
	//	*Psiphond_ServerTunnelAsnDestBytes
	//	*Psiphond_Tactics
	//	*Psiphond_TacticsSpeedtest
	//	*Psiphond_UniqueUser
	Metric        isPsiphond_Metric `protobuf_oneof:"metric"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Psiphond) Reset() {
	*x = Psiphond{}
	mi := &file_ca_psiphon_psiphond_psiphond_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Psiphond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Psiphond) ProtoMessage() {}

func (x *Psiphond) ProtoReflect() protoreflect.Message {
	mi := &file_ca_psiphon_psiphond_psiphond_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Psiphond.ProtoReflect.Descriptor instead.
func (*Psiphond) Descriptor() ([]byte, []int) {
	return file_ca_psiphon_psiphond_psiphond_proto_rawDescGZIP(), []int{0}
}

func (x *Psiphond) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Psiphond) GetHostId() string {
	if x != nil && x.HostId != nil {
		return *x.HostId
	}
	return ""
}

func (x *Psiphond) GetHostType() string {
	if x != nil && x.HostType != nil {
		return *x.HostType
	}
	return ""
}

func (x *Psiphond) GetHostBuildRev() string {
	if x != nil && x.HostBuildRev != nil {
		return *x.HostBuildRev
	}
	return ""
}

func (x *Psiphond) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *Psiphond) GetMetric() isPsiphond_Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *Psiphond) GetDomainBytes() *DomainBytes {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_DomainBytes); ok {
			return x.DomainBytes
		}
	}
	return nil
}

func (x *Psiphond) GetFailedTunnel() *FailedTunnel {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_FailedTunnel); ok {
			return x.FailedTunnel
		}
	}
	return nil
}

func (x *Psiphond) GetInproxyBroker() *InproxyBroker {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_InproxyBroker); ok {
			return x.InproxyBroker
		}
	}
	return nil
}

func (x *Psiphond) GetIrregularTunnel() *IrregularTunnel {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_IrregularTunnel); ok {
			return x.IrregularTunnel
		}
	}
	return nil
}

func (x *Psiphond) GetOrphanPacket() *OrphanPacket {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_OrphanPacket); ok {
			return x.OrphanPacket
		}
	}
	return nil
}

func (x *Psiphond) GetRemoteServerList() *RemoteServerList {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_RemoteServerList); ok {
			return x.RemoteServerList
		}
	}
	return nil
}

func (x *Psiphond) GetServerBlocklist() *ServerBlocklistHit {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerBlocklist); ok {
			return x.ServerBlocklist
		}
	}
	return nil
}

func (x *Psiphond) GetServerLoad() *ServerLoad {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerLoad); ok {
			return x.ServerLoad
		}
	}
	return nil
}

func (x *Psiphond) GetServerLoadDns() *ServerLoadDNS {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerLoadDns); ok {
			return x.ServerLoadDns
		}
	}
	return nil
}

func (x *Psiphond) GetServerLoadProtocol() *ServerLoadProtocol {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerLoadProtocol); ok {
			return x.ServerLoadProtocol
		}
	}
	return nil
}

func (x *Psiphond) GetServerPanic() *ServerPanic {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerPanic); ok {
			return x.ServerPanic
		}
	}
	return nil
}

func (x *Psiphond) GetServerPacket() *ServerPacket {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerPacket); ok {
			return x.ServerPacket
		}
	}
	return nil
}

func (x *Psiphond) GetServerTunnel() *ServerTunnel {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerTunnel); ok {
			return x.ServerTunnel
		}
	}
	return nil
}

func (x *Psiphond) GetServerTunnelAsnDestBytes() *ServerTunnelASNDestBytes {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_ServerTunnelAsnDestBytes); ok {
			return x.ServerTunnelAsnDestBytes
		}
	}
	return nil
}

func (x *Psiphond) GetTactics() *Tactics {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_Tactics); ok {
			return x.Tactics
		}
	}
	return nil
}

func (x *Psiphond) GetTacticsSpeedtest() *TacticsSpeedTest {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_TacticsSpeedtest); ok {
			return x.TacticsSpeedtest
		}
	}
	return nil
}

func (x *Psiphond) GetUniqueUser() *UniqueUser {
	if x != nil {
		if x, ok := x.Metric.(*Psiphond_UniqueUser); ok {
			return x.UniqueUser
		}
	}
	return nil
}

type isPsiphond_Metric interface {
	isPsiphond_Metric()
}

type Psiphond_DomainBytes struct {
	DomainBytes *DomainBytes `protobuf:"bytes,101,opt,name=domain_bytes,json=domainBytes,proto3,oneof"`
}

type Psiphond_FailedTunnel struct {
	FailedTunnel *FailedTunnel `protobuf:"bytes,102,opt,name=failed_tunnel,json=failedTunnel,proto3,oneof"`
}

type Psiphond_InproxyBroker struct {
	InproxyBroker *InproxyBroker `protobuf:"bytes,103,opt,name=inproxy_broker,json=inproxyBroker,proto3,oneof"`
}

type Psiphond_IrregularTunnel struct {
	IrregularTunnel *IrregularTunnel `protobuf:"bytes,104,opt,name=irregular_tunnel,json=irregularTunnel,proto3,oneof"`
}

type Psiphond_OrphanPacket struct {
	OrphanPacket *OrphanPacket `protobuf:"bytes,105,opt,name=orphan_packet,json=orphanPacket,proto3,oneof"`
}

type Psiphond_RemoteServerList struct {
	RemoteServerList *RemoteServerList `protobuf:"bytes,106,opt,name=remote_server_list,json=remoteServerList,proto3,oneof"`
}

type Psiphond_ServerBlocklist struct {
	ServerBlocklist *ServerBlocklistHit `protobuf:"bytes,107,opt,name=server_blocklist,json=serverBlocklist,proto3,oneof"`
}

type Psiphond_ServerLoad struct {
	ServerLoad *ServerLoad `protobuf:"bytes,108,opt,name=server_load,json=serverLoad,proto3,oneof"`
}

type Psiphond_ServerLoadDns struct {
	ServerLoadDns *ServerLoadDNS `protobuf:"bytes,109,opt,name=server_load_dns,json=serverLoadDns,proto3,oneof"`
}

type Psiphond_ServerLoadProtocol struct {
	ServerLoadProtocol *ServerLoadProtocol `protobuf:"bytes,110,opt,name=server_load_protocol,json=serverLoadProtocol,proto3,oneof"`
}

type Psiphond_ServerPanic struct {
	ServerPanic *ServerPanic `protobuf:"bytes,111,opt,name=server_panic,json=serverPanic,proto3,oneof"`
}

type Psiphond_ServerPacket struct {
	ServerPacket *ServerPacket `protobuf:"bytes,112,opt,name=server_packet,json=serverPacket,proto3,oneof"`
}

type Psiphond_ServerTunnel struct {
	ServerTunnel *ServerTunnel `protobuf:"bytes,113,opt,name=server_tunnel,json=serverTunnel,proto3,oneof"`
}

type Psiphond_ServerTunnelAsnDestBytes struct {
	ServerTunnelAsnDestBytes *ServerTunnelASNDestBytes `protobuf:"bytes,114,opt,name=server_tunnel_asn_dest_bytes,json=serverTunnelAsnDestBytes,proto3,oneof"`
}

type Psiphond_Tactics struct {
	Tactics *Tactics `protobuf:"bytes,115,opt,name=tactics,proto3,oneof"`
}

type Psiphond_TacticsSpeedtest struct {
	TacticsSpeedtest *TacticsSpeedTest `protobuf:"bytes,116,opt,name=tactics_speedtest,json=tacticsSpeedtest,proto3,oneof"`
}

type Psiphond_UniqueUser struct {
	UniqueUser *UniqueUser `protobuf:"bytes,117,opt,name=unique_user,json=uniqueUser,proto3,oneof"`
}

func (*Psiphond_DomainBytes) isPsiphond_Metric() {}

func (*Psiphond_FailedTunnel) isPsiphond_Metric() {}

func (*Psiphond_InproxyBroker) isPsiphond_Metric() {}

func (*Psiphond_IrregularTunnel) isPsiphond_Metric() {}

func (*Psiphond_OrphanPacket) isPsiphond_Metric() {}

func (*Psiphond_RemoteServerList) isPsiphond_Metric() {}

func (*Psiphond_ServerBlocklist) isPsiphond_Metric() {}

func (*Psiphond_ServerLoad) isPsiphond_Metric() {}

func (*Psiphond_ServerLoadDns) isPsiphond_Metric() {}

func (*Psiphond_ServerLoadProtocol) isPsiphond_Metric() {}

func (*Psiphond_ServerPanic) isPsiphond_Metric() {}

func (*Psiphond_ServerPacket) isPsiphond_Metric() {}

func (*Psiphond_ServerTunnel) isPsiphond_Metric() {}

func (*Psiphond_ServerTunnelAsnDestBytes) isPsiphond_Metric() {}

func (*Psiphond_Tactics) isPsiphond_Metric() {}

func (*Psiphond_TacticsSpeedtest) isPsiphond_Metric() {}

func (*Psiphond_UniqueUser) isPsiphond_Metric() {}

var File_ca_psiphon_psiphond_psiphond_proto protoreflect.FileDescriptor

const file_ca_psiphon_psiphond_psiphond_proto_rawDesc = "" +
	"\n" +
	"\"ca.psiphon.psiphond/psiphond.proto\x12\x13ca.psiphon.psiphond\x1a\x1fgoogle/protobuf/timestamp.proto\x1a&ca.psiphon.psiphond/domain_bytes.proto\x1a'ca.psiphon.psiphond/failed_tunnel.proto\x1a(ca.psiphon.psiphond/inproxy_broker.proto\x1a*ca.psiphon.psiphond/irregular_tunnel.proto\x1a'ca.psiphon.psiphond/orphan_packet.proto\x1a,ca.psiphon.psiphond/remote_server_list.proto\x1a*ca.psiphon.psiphond/server_blocklist.proto\x1a%ca.psiphon.psiphond/server_load.proto\x1a&ca.psiphon.psiphond/server_panic.proto\x1a'ca.psiphon.psiphond/server_packet.proto\x1a'ca.psiphon.psiphond/server_tunnel.proto\x1a!ca.psiphon.psiphond/tactics.proto\x1a%ca.psiphon.psiphond/unique_user.proto\"\xde\f\n" +
	"\bPsiphond\x12=\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\ttimestamp\x88\x01\x01\x12\x1c\n" +
	"\ahost_id\x18\x02 \x01(\tH\x02R\x06hostId\x88\x01\x01\x12 \n" +
	"\thost_type\x18\x03 \x01(\tH\x03R\bhostType\x88\x01\x01\x12)\n" +
	"\x0ehost_build_rev\x18\x04 \x01(\tH\x04R\fhostBuildRev\x88\x01\x01\x12\x1f\n" +
	"\bprovider\x18\x05 \x01(\tH\x05R\bprovider\x88\x01\x01\x12E\n" +
	"\fdomain_bytes\x18e \x01(\v2 .ca.psiphon.psiphond.DomainBytesH\x00R\vdomainBytes\x12H\n" +
	"\rfailed_tunnel\x18f \x01(\v2!.ca.psiphon.psiphond.FailedTunnelH\x00R\ffailedTunnel\x12K\n" +
	"\x0einproxy_broker\x18g \x01(\v2\".ca.psiphon.psiphond.InproxyBrokerH\x00R\rinproxyBroker\x12Q\n" +
	"\x10irregular_tunnel\x18h \x01(\v2$.ca.psiphon.psiphond.IrregularTunnelH\x00R\x0firregularTunnel\x12H\n" +
	"\rorphan_packet\x18i \x01(\v2!.ca.psiphon.psiphond.OrphanPacketH\x00R\forphanPacket\x12U\n" +
	"\x12remote_server_list\x18j \x01(\v2%.ca.psiphon.psiphond.RemoteServerListH\x00R\x10remoteServerList\x12T\n" +
	"\x10server_blocklist\x18k \x01(\v2'.ca.psiphon.psiphond.ServerBlocklistHitH\x00R\x0fserverBlocklist\x12B\n" +
	"\vserver_load\x18l \x01(\v2\x1f.ca.psiphon.psiphond.ServerLoadH\x00R\n" +
	"serverLoad\x12L\n" +
	"\x0fserver_load_dns\x18m \x01(\v2\".ca.psiphon.psiphond.ServerLoadDNSH\x00R\rserverLoadDns\x12[\n" +
	"\x14server_load_protocol\x18n \x01(\v2'.ca.psiphon.psiphond.ServerLoadProtocolH\x00R\x12serverLoadProtocol\x12E\n" +
	"\fserver_panic\x18o \x01(\v2 .ca.psiphon.psiphond.ServerPanicH\x00R\vserverPanic\x12H\n" +
	"\rserver_packet\x18p \x01(\v2!.ca.psiphon.psiphond.ServerPacketH\x00R\fserverPacket\x12H\n" +
	"\rserver_tunnel\x18q \x01(\v2!.ca.psiphon.psiphond.ServerTunnelH\x00R\fserverTunnel\x12o\n" +
	"\x1cserver_tunnel_asn_dest_bytes\x18r \x01(\v2-.ca.psiphon.psiphond.ServerTunnelASNDestBytesH\x00R\x18serverTunnelAsnDestBytes\x128\n" +
	"\atactics\x18s \x01(\v2\x1c.ca.psiphon.psiphond.TacticsH\x00R\atactics\x12T\n" +
	"\x11tactics_speedtest\x18t \x01(\v2%.ca.psiphon.psiphond.TacticsSpeedTestH\x00R\x10tacticsSpeedtest\x12B\n" +
	"\vunique_user\x18u \x01(\v2\x1f.ca.psiphon.psiphond.UniqueUserH\x00R\n" +
	"uniqueUserB\b\n" +
	"\x06metricB\f\n" +
	"\n" +
	"_timestampB\n" +
	"\n" +
	"\b_host_idB\f\n" +
	"\n" +
	"_host_typeB\x11\n" +
	"\x0f_host_build_revB\v\n" +
	"\t_providerBHZFgithub.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pb/psiphondb\x06proto3"

var (
	file_ca_psiphon_psiphond_psiphond_proto_rawDescOnce sync.Once
	file_ca_psiphon_psiphond_psiphond_proto_rawDescData []byte
)

func file_ca_psiphon_psiphond_psiphond_proto_rawDescGZIP() []byte {
	file_ca_psiphon_psiphond_psiphond_proto_rawDescOnce.Do(func() {
		file_ca_psiphon_psiphond_psiphond_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_psiphond_proto_rawDesc), len(file_ca_psiphon_psiphond_psiphond_proto_rawDesc)))
	})
	return file_ca_psiphon_psiphond_psiphond_proto_rawDescData
}

var file_ca_psiphon_psiphond_psiphond_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ca_psiphon_psiphond_psiphond_proto_goTypes = []any{
	(*Psiphond)(nil),                 // 0: ca.psiphon.psiphond.Psiphond
	(*timestamppb.Timestamp)(nil),    // 1: google.protobuf.Timestamp
	(*DomainBytes)(nil),              // 2: ca.psiphon.psiphond.DomainBytes
	(*FailedTunnel)(nil),             // 3: ca.psiphon.psiphond.FailedTunnel
	(*InproxyBroker)(nil),            // 4: ca.psiphon.psiphond.InproxyBroker
	(*IrregularTunnel)(nil),          // 5: ca.psiphon.psiphond.IrregularTunnel
	(*OrphanPacket)(nil),             // 6: ca.psiphon.psiphond.OrphanPacket
	(*RemoteServerList)(nil),         // 7: ca.psiphon.psiphond.RemoteServerList
	(*ServerBlocklistHit)(nil),       // 8: ca.psiphon.psiphond.ServerBlocklistHit
	(*ServerLoad)(nil),               // 9: ca.psiphon.psiphond.ServerLoad
	(*ServerLoadDNS)(nil),            // 10: ca.psiphon.psiphond.ServerLoadDNS
	(*ServerLoadProtocol)(nil),       // 11: ca.psiphon.psiphond.ServerLoadProtocol
	(*ServerPanic)(nil),              // 12: ca.psiphon.psiphond.ServerPanic
	(*ServerPacket)(nil),             // 13: ca.psiphon.psiphond.ServerPacket
	(*ServerTunnel)(nil),             // 14: ca.psiphon.psiphond.ServerTunnel
	(*ServerTunnelASNDestBytes)(nil), // 15: ca.psiphon.psiphond.ServerTunnelASNDestBytes
	(*Tactics)(nil),                  // 16: ca.psiphon.psiphond.Tactics
	(*TacticsSpeedTest)(nil),         // 17: ca.psiphon.psiphond.TacticsSpeedTest
	(*UniqueUser)(nil),               // 18: ca.psiphon.psiphond.UniqueUser
}
var file_ca_psiphon_psiphond_psiphond_proto_depIdxs = []int32{
	1,  // 0: ca.psiphon.psiphond.Psiphond.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 1: ca.psiphon.psiphond.Psiphond.domain_bytes:type_name -> ca.psiphon.psiphond.DomainBytes
	3,  // 2: ca.psiphon.psiphond.Psiphond.failed_tunnel:type_name -> ca.psiphon.psiphond.FailedTunnel
	4,  // 3: ca.psiphon.psiphond.Psiphond.inproxy_broker:type_name -> ca.psiphon.psiphond.InproxyBroker
	5,  // 4: ca.psiphon.psiphond.Psiphond.irregular_tunnel:type_name -> ca.psiphon.psiphond.IrregularTunnel
	6,  // 5: ca.psiphon.psiphond.Psiphond.orphan_packet:type_name -> ca.psiphon.psiphond.OrphanPacket
	7,  // 6: ca.psiphon.psiphond.Psiphond.remote_server_list:type_name -> ca.psiphon.psiphond.RemoteServerList
	8,  // 7: ca.psiphon.psiphond.Psiphond.server_blocklist:type_name -> ca.psiphon.psiphond.ServerBlocklistHit
	9,  // 8: ca.psiphon.psiphond.Psiphond.server_load:type_name -> ca.psiphon.psiphond.ServerLoad
	10, // 9: ca.psiphon.psiphond.Psiphond.server_load_dns:type_name -> ca.psiphon.psiphond.ServerLoadDNS
	11, // 10: ca.psiphon.psiphond.Psiphond.server_load_protocol:type_name -> ca.psiphon.psiphond.ServerLoadProtocol
	12, // 11: ca.psiphon.psiphond.Psiphond.server_panic:type_name -> ca.psiphon.psiphond.ServerPanic
	13, // 12: ca.psiphon.psiphond.Psiphond.server_packet:type_name -> ca.psiphon.psiphond.ServerPacket
	14, // 13: ca.psiphon.psiphond.Psiphond.server_tunnel:type_name -> ca.psiphon.psiphond.ServerTunnel
	15, // 14: ca.psiphon.psiphond.Psiphond.server_tunnel_asn_dest_bytes:type_name -> ca.psiphon.psiphond.ServerTunnelASNDestBytes
	16, // 15: ca.psiphon.psiphond.Psiphond.tactics:type_name -> ca.psiphon.psiphond.Tactics
	17, // 16: ca.psiphon.psiphond.Psiphond.tactics_speedtest:type_name -> ca.psiphon.psiphond.TacticsSpeedTest
	18, // 17: ca.psiphon.psiphond.Psiphond.unique_user:type_name -> ca.psiphon.psiphond.UniqueUser
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ca_psiphon_psiphond_psiphond_proto_init() }
func file_ca_psiphon_psiphond_psiphond_proto_init() {
	if File_ca_psiphon_psiphond_psiphond_proto != nil {
		return
	}
	file_ca_psiphon_psiphond_domain_bytes_proto_init()
	file_ca_psiphon_psiphond_failed_tunnel_proto_init()
	file_ca_psiphon_psiphond_inproxy_broker_proto_init()
	file_ca_psiphon_psiphond_irregular_tunnel_proto_init()
	file_ca_psiphon_psiphond_orphan_packet_proto_init()
	file_ca_psiphon_psiphond_remote_server_list_proto_init()
	file_ca_psiphon_psiphond_server_blocklist_proto_init()
	file_ca_psiphon_psiphond_server_load_proto_init()
	file_ca_psiphon_psiphond_server_panic_proto_init()
	file_ca_psiphon_psiphond_server_packet_proto_init()
	file_ca_psiphon_psiphond_server_tunnel_proto_init()
	file_ca_psiphon_psiphond_tactics_proto_init()
	file_ca_psiphon_psiphond_unique_user_proto_init()
	file_ca_psiphon_psiphond_psiphond_proto_msgTypes[0].OneofWrappers = []any{
		(*Psiphond_DomainBytes)(nil),
		(*Psiphond_FailedTunnel)(nil),
		(*Psiphond_InproxyBroker)(nil),
		(*Psiphond_IrregularTunnel)(nil),
		(*Psiphond_OrphanPacket)(nil),
		(*Psiphond_RemoteServerList)(nil),
		(*Psiphond_ServerBlocklist)(nil),
		(*Psiphond_ServerLoad)(nil),
		(*Psiphond_ServerLoadDns)(nil),
		(*Psiphond_ServerLoadProtocol)(nil),
		(*Psiphond_ServerPanic)(nil),
		(*Psiphond_ServerPacket)(nil),
		(*Psiphond_ServerTunnel)(nil),
		(*Psiphond_ServerTunnelAsnDestBytes)(nil),
		(*Psiphond_Tactics)(nil),
		(*Psiphond_TacticsSpeedtest)(nil),
		(*Psiphond_UniqueUser)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ca_psiphon_psiphond_psiphond_proto_rawDesc), len(file_ca_psiphon_psiphond_psiphond_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ca_psiphon_psiphond_psiphond_proto_goTypes,
		DependencyIndexes: file_ca_psiphon_psiphond_psiphond_proto_depIdxs,
		MessageInfos:      file_ca_psiphon_psiphond_psiphond_proto_msgTypes,
	}.Build()
	File_ca_psiphon_psiphond_psiphond_proto = out.File
	file_ca_psiphon_psiphond_psiphond_proto_goTypes = nil
	file_ca_psiphon_psiphond_psiphond_proto_depIdxs = nil
}
